2024-04-02 02:23:13 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 39072 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 02:23:13 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 02:23:15 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 02:23:16 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 02:23:16 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 02:23:16 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712038996607
2024-04-02 02:23:18 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 02:23:18 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 5.304 seconds (process running for 6.8)
2024-04-02 02:23:18 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 02:23:29 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 02:23:33 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 02:23:35 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 02:23:39 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 02:23:47 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 02:24:03 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 02:24:35 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 02:24:35 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-04-02 02:24:35 [main] ERROR o.s.boot.SpringApplication - Application run failed
com.juank.microservices.kafka.admin.exception.KafkaClientException: Reached max number of retry for reading kafka topic(s)!
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkMaxRetry(KafkaAdminClients.java:107)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkTopicsCreated(KafkaAdminClients.java:64)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.createTopics(KafkaAdminClients.java:53)
	at com.juank.microservices.twitter_to_kafka.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:27)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.run(TwitterToKafkaServiceApplication.java:46)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.main(TwitterToKafkaServiceApplication.java:38)
2024-04-02 02:24:37 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 02:24:37 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 02:24:37 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 02:24:37 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 12:37:28 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 20356 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 12:37:28 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 12:37:30 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 12:37:31 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 12:37:31 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 12:37:31 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712075851242
2024-04-02 12:37:31 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -3 disconnected.
2024-04-02 12:37:31 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node -3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 12:37:32 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 12:37:32 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 4.917 seconds (process running for 6.65)
2024-04-02 12:37:32 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 12:37:32 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 12:37:32 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:37:34 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:37:38 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:37:46 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:38:02 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:38:07 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 12:38:07 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 12:38:07 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 12:38:07 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 12:39:29 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 35084 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 12:39:29 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 12:39:31 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 12:39:32 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 12:39:32 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 12:39:32 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712075972337
2024-04-02 12:39:32 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -3 disconnected.
2024-04-02 12:39:32 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node -3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 12:39:33 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 12:39:33 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 5.368 seconds (process running for 7.553)
2024-04-02 12:39:33 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 12:39:39 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 12:39:39 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:39:41 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:39:45 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:39:49 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 12:39:49 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 12:39:49 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 12:39:49 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 12:49:52 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 47924 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 12:49:52 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 12:49:54 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 12:49:54 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 12:49:54 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 12:49:54 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712076594861
2024-04-02 12:49:56 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 12:49:56 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 4.761 seconds (process running for 6.372)
2024-04-02 12:49:56 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 12:49:56 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 12:49:56 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 12:49:56 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:50:14 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:51:08 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:52:15 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:52:38 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:53:16 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 12:53:20 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-04-02 12:53:20 [main] ERROR o.s.boot.SpringApplication - Application run failed
com.juank.microservices.kafka.admin.exception.KafkaClientException: Reached max number of retry for reading kafka topic(s)!
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkMaxRetry(KafkaAdminClients.java:108)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkTopicsCreated(KafkaAdminClients.java:65)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.createTopics(KafkaAdminClients.java:54)
	at com.juank.microservices.twitter_to_kafka.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:27)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.run(TwitterToKafkaServiceApplication.java:46)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.main(TwitterToKafkaServiceApplication.java:38)
2024-04-02 12:53:22 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 12:53:22 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 12:53:22 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 12:53:22 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:00:34 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 45636 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:00:34 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:00:37 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:00:37 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:00:37 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:00:37 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712077237605
2024-04-02 13:00:38 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:00:38 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 4.974 seconds (process running for 6.344)
2024-04-02 13:00:38 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:00:38 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:00:38 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:00:38 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:00:40 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:00:44 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:00:53 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:01:15 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-04-02 13:01:16 [main] ERROR o.s.boot.SpringApplication - Application run failed
com.juank.microservices.kafka.admin.exception.KafkaClientException: Reached max number of retry for reading kafka topic(s)!
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkMaxRetry(KafkaAdminClients.java:108)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkTopicsCreated(KafkaAdminClients.java:65)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.createTopics(KafkaAdminClients.java:54)
	at com.juank.microservices.twitter_to_kafka.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:27)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.run(TwitterToKafkaServiceApplication.java:46)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.main(TwitterToKafkaServiceApplication.java:38)
2024-04-02 13:01:18 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:01:18 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:01:18 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:01:18 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:02:16 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 49696 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:02:16 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:02:18 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:02:19 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:02:19 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:02:19 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712077339006
2024-04-02 13:02:19 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -3 disconnected.
2024-04-02 13:02:19 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node -3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 13:02:20 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:02:20 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 5.1 seconds (process running for 6.418)
2024-04-02 13:02:20 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:02:20 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:02:20 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:02:34 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-04-02 13:02:34 [main] ERROR o.s.boot.SpringApplication - Application run failed
com.juank.microservices.kafka.admin.exception.KafkaClientException: Reached max number of retry for reading kafka topic(s)!
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkMaxRetry(KafkaAdminClients.java:108)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkSchemaRegistry(KafkaAdminClients.java:87)
	at com.juank.microservices.twitter_to_kafka.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:28)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.run(TwitterToKafkaServiceApplication.java:46)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.main(TwitterToKafkaServiceApplication.java:38)
2024-04-02 13:02:37 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:02:37 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:02:37 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:02:37 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:06:44 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 36548 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:06:44 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:06:46 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:06:47 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:06:47 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:06:47 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712077607019
2024-04-02 13:06:47 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -3 disconnected.
2024-04-02 13:06:47 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node -3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 13:06:48 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:06:48 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 5.478 seconds (process running for 6.729)
2024-04-02 13:06:48 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:06:48 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:06:48 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:06:51 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:07:04 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:07:11 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:07:30 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:07:36 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-04-02 13:07:36 [main] ERROR o.s.boot.SpringApplication - Application run failed
com.juank.microservices.kafka.admin.exception.KafkaClientException: Reached max number of retry for reading kafka topic(s)!
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkMaxRetry(KafkaAdminClients.java:108)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkTopicsCreated(KafkaAdminClients.java:65)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.createTopics(KafkaAdminClients.java:54)
	at com.juank.microservices.twitter_to_kafka.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:27)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.run(TwitterToKafkaServiceApplication.java:46)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.main(TwitterToKafkaServiceApplication.java:38)
2024-04-02 13:07:38 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:07:38 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:07:38 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:07:38 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:07:49 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 47824 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:07:49 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:07:51 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:07:52 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:07:52 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:07:52 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712077672062
2024-04-02 13:07:52 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -3 disconnected.
2024-04-02 13:07:52 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node -3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 13:07:53 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:07:53 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 5.447 seconds (process running for 7.16)
2024-04-02 13:07:53 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:07:53 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:07:53 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:07:53 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:08:08 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:08:08 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:08:08 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:08:08 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:08:08 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:08:28 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 43508 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:08:28 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:08:30 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:08:31 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:08:31 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:08:31 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712077711199
2024-04-02 13:08:32 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:08:32 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 5.258 seconds (process running for 6.435)
2024-04-02 13:08:32 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:08:47 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:09:21 [kafka-admin-client-thread | adminclient-1] INFO  o.a.k.clients.admin.KafkaAdminClient - [AdminClient clientId=adminclient-1] Disconnecting from 2 and revoking 1 node assignment(s) because the node is taking too long to become ready.
2024-04-02 13:09:21 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Client requested disconnect from node 2
2024-04-02 13:09:21 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 3 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 13:09:21 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:09:27 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:09:29 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:09:29 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:09:29 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:09:29 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:09:29 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:25:21 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 47004 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:25:21 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:25:24 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:25:24 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:25:24 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:25:24 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712078724531
2024-04-02 13:25:24 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -3 disconnected.
2024-04-02 13:25:24 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node -3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 13:25:25 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:25:25 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 5.027 seconds (process running for 6.322)
2024-04-02 13:25:25 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:25:25 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:25:25 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:25:25 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:25:27 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:25:31 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:25:39 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:25:39 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-04-02 13:25:39 [main] ERROR o.s.boot.SpringApplication - Application run failed
com.juank.microservices.kafka.admin.exception.KafkaClientException: Reached max number of retry for reading kafka topic(s)!
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkMaxRetry(KafkaAdminClients.java:108)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkTopicsCreated(KafkaAdminClients.java:65)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.createTopics(KafkaAdminClients.java:54)
	at com.juank.microservices.twitter_to_kafka.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:27)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.run(TwitterToKafkaServiceApplication.java:46)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.main(TwitterToKafkaServiceApplication.java:38)
2024-04-02 13:25:41 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:25:41 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:25:41 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:25:41 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:31:57 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 15996 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:31:57 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:31:59 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:31:59 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:31:59 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:31:59 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712079119906
2024-04-02 13:32:01 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:32:01 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 5.093 seconds (process running for 6.436)
2024-04-02 13:32:01 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:32:01 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:32:01 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:32:01 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:32:02 [main] INFO  c.j.m.t.i.i.KafkaStreamInitializer - Topics with name twitter-topic is ready for operations!
2024-04-02 13:32:02 [main] INFO  c.j.m.t.r.impl.MockKafkaStreamRunner - Starting mock filtering stream for keywords [Java, Microservices, Spring, Kafka, Elasticsearch]
2024-04-02 13:32:02 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor Lorem  amet, sit sit ipsum Microservices amet, sit Lorem  sit ipsum ipsum
2024-04-02 13:32:03 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2680575284298496630, "id": 7925408181738346848, "text": "amet, dolor Lorem  amet, sit sit ipsum Microservices amet, sit Lorem  sit ipsum ipsum", "createdAt": 1712079122000}' to topic='twitter-topic'
2024-04-02 13:37:00 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -1 disconnected.
2024-04-02 13:41:11 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:41:11 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:41:11 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:41:11 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:41:14 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 44760 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:41:14 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:41:17 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:41:17 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:41:17 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:41:17 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712079677774
2024-04-02 13:41:18 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:41:18 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 5.221 seconds (process running for 6.825)
2024-04-02 13:41:19 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:41:19 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:41:19 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:41:19 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:41:19 [main] INFO  c.j.m.t.i.i.KafkaStreamInitializer - Topics with name twitter-topic is ready for operations!
2024-04-02 13:41:19 [main] INFO  c.j.m.t.r.impl.MockKafkaStreamRunner - Starting mock filtering stream for keywords [Java, Microservices, Spring, Kafka, Elasticsearch]
2024-04-02 13:41:19 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit ipsum ipsum sit Spring Lorem  dolor sit
2024-04-02 13:41:19 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8163698149886541754, "id": 4418637055971217656, "text": "sit sit ipsum ipsum sit Spring Lorem  dolor sit", "createdAt": 1712079679000}' to topic='twitter-topic'
2024-04-02 13:43:44 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:43:44 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:43:44 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:43:44 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:43:50 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 47764 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:43:50 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:43:52 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:43:53 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:43:53 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:43:53 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712079833283
2024-04-02 13:43:54 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:43:54 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 4.567 seconds (process running for 6.282)
2024-04-02 13:43:54 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:43:54 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:43:54 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:43:54 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:43:54 [main] INFO  c.j.m.t.i.i.KafkaStreamInitializer - Topics with name twitter-topic is ready for operations!
2024-04-02 13:43:54 [main] INFO  c.j.m.t.r.impl.MockKafkaStreamRunner - Starting mock filtering stream for keywords [Java, Microservices, Spring, Kafka, Elasticsearch]
2024-04-02 13:43:55 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor amet, sit dolor sit Lorem  Java amet, amet, Lorem  sit sit Lorem
2024-04-02 13:43:55 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5405767565690107608, "id": 4761573604286772713, "text": "sit dolor amet, sit dolor sit Lorem  Java amet, amet, Lorem  sit sit Lorem", "createdAt": 1712079834000}' to topic='twitter-topic'
2024-04-02 13:48:53 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -3 disconnected.
2024-04-02 13:49:19 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:49:19 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:49:19 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:49:19 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:49:23 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 23152 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:49:23 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:49:25 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:49:25 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:49:25 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:49:25 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712080165622
2024-04-02 13:49:26 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:49:26 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 4.439 seconds (process running for 5.564)
2024-04-02 13:49:26 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:49:26 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:49:26 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:49:26 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:49:27 [main] INFO  c.j.m.t.i.i.KafkaStreamInitializer - Topics with name twitter-topic is ready for operations!
2024-04-02 13:49:27 [main] INFO  c.j.m.t.r.impl.MockKafkaStreamRunner - Starting mock filtering stream for keywords [Java, Microservices, Spring, Kafka, Elasticsearch]
2024-04-02 13:49:27 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum ipsum amet, amet, Lorem  Kafka Lorem  ipsum ipsum
2024-04-02 13:49:27 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 617737811943797747, "id": 6038858447353084295, "text": "ipsum ipsum amet, amet, Lorem  Kafka Lorem  ipsum ipsum", "createdAt": 1712080167000}' to topic='twitter-topic'
2024-04-02 13:54:26 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -2 disconnected.
2024-04-02 13:57:33 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:57:33 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:57:33 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:57:33 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:57:41 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 44176 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 13:57:41 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 13:57:44 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 13:57:44 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 13:57:44 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 13:57:44 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712080664481
2024-04-02 13:57:45 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 13:57:45 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 5.103 seconds (process running for 6.471)
2024-04-02 13:57:45 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 13:57:45 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 13:57:45 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 13:57:45 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 13:57:46 [main] INFO  c.j.m.t.i.i.KafkaStreamInitializer - Topics with name twitter-topic is ready for operations!
2024-04-02 13:57:46 [main] INFO  c.j.m.t.r.impl.MockKafkaStreamRunner - Starting mock filtering stream for keywords [Java, Microservices, Spring, Kafka, Elasticsearch]
2024-04-02 13:57:46 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  dolor ipsum Microservices ipsum amet,
2024-04-02 13:57:46 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5721434946740884336, "id": 4664825752542504459, "text": "sit Lorem  dolor ipsum Microservices ipsum amet,", "createdAt": 1712080666000}' to topic='twitter-topic'
2024-04-02 13:57:46 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:47 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor dolor ipsum Lorem  sit Kafka sit sit Lorem  sit dolor
2024-04-02 13:57:47 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3862280075325672623, "id": 5682591133386048114, "text": "amet, dolor dolor ipsum Lorem  sit Kafka sit sit Lorem  sit dolor", "createdAt": 1712080667000}' to topic='twitter-topic'
2024-04-02 13:57:47 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:48 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum amet, Lorem  amet, Lorem  Lorem  dolor Kafka dolor dolor dolor sit Lorem
2024-04-02 13:57:48 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5938261873021510878, "id": 5178114439755675572, "text": "ipsum amet, Lorem  amet, Lorem  Lorem  dolor Kafka dolor dolor dolor sit Lorem", "createdAt": 1712080668000}' to topic='twitter-topic'
2024-04-02 13:57:48 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:49 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor sit dolor sit Java ipsum sit sit dolor
2024-04-02 13:57:49 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5189106484800829766, "id": 5891764598494328074, "text": "ipsum dolor sit dolor sit Java ipsum sit sit dolor", "createdAt": 1712080669000}' to topic='twitter-topic'
2024-04-02 13:57:49 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:50 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit sit sit amet, Spring dolor sit sit
2024-04-02 13:57:50 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5624481293416416767, "id": 2659493012407340677, "text": "Lorem  sit sit sit amet, Spring dolor sit sit", "createdAt": 1712080670000}' to topic='twitter-topic'
2024-04-02 13:57:50 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:51 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor amet, dolor amet, amet, Kafka ipsum dolor amet, amet,
2024-04-02 13:57:51 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 467577002045259607, "id": 4264355326897079798, "text": "dolor amet, dolor amet, amet, Kafka ipsum dolor amet, amet,", "createdAt": 1712080671000}' to topic='twitter-topic'
2024-04-02 13:57:51 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:52 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum Lorem  Lorem  sit Lorem  sit Java amet, Lorem  Lorem  dolor dolor
2024-04-02 13:57:52 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 952443346663535897, "id": 6149480638392944236, "text": "Lorem  ipsum Lorem  Lorem  sit Lorem  sit Java amet, Lorem  Lorem  dolor dolor", "createdAt": 1712080672000}' to topic='twitter-topic'
2024-04-02 13:57:52 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:53 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, amet, Lorem  ipsum sit sit amet, dolor Java sit sit dolor Lorem  dolor Lorem  sit
2024-04-02 13:57:53 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2073924123256418629, "id": 1408166206062706075, "text": "amet, amet, Lorem  ipsum sit sit amet, dolor Java sit sit dolor Lorem  dolor Lorem  sit", "createdAt": 1712080673000}' to topic='twitter-topic'
2024-04-02 13:57:53 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:54 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum sit Lorem  sit amet, sit dolor ipsum Kafka Lorem  amet, dolor dolor dolor Lorem
2024-04-02 13:57:54 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8699113384094291947, "id": 4768754805593145393, "text": "ipsum sit Lorem  sit amet, sit dolor ipsum Kafka Lorem  amet, dolor dolor dolor Lorem", "createdAt": 1712080674000}' to topic='twitter-topic'
2024-04-02 13:57:54 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:55 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  ipsum dolor amet, amet, Lorem  Lorem  Java sit sit Lorem  ipsum dolor dolor dolor
2024-04-02 13:57:55 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7091003984479038572, "id": 4644563800208590965, "text": "dolor Lorem  ipsum dolor amet, amet, Lorem  Lorem  Java sit sit Lorem  ipsum dolor dolor dolor", "createdAt": 1712080675000}' to topic='twitter-topic'
2024-04-02 13:57:55 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:56 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  dolor dolor Lorem  Lorem  Lorem  dolor Elasticsearch amet, amet, amet, amet, amet, sit amet,
2024-04-02 13:57:56 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5928300799665297590, "id": 2494628587099717664, "text": "sit Lorem  dolor dolor Lorem  Lorem  Lorem  dolor Elasticsearch amet, amet, amet, amet, amet, sit amet,", "createdAt": 1712080676000}' to topic='twitter-topic'
2024-04-02 13:57:56 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:57 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  sit ipsum Microservices sit dolor
2024-04-02 13:57:57 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4295838953891020403, "id": 7700976141393877956, "text": "sit Lorem  sit ipsum Microservices sit dolor", "createdAt": 1712080677000}' to topic='twitter-topic'
2024-04-02 13:57:57 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:58 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit amet, Lorem  Elasticsearch amet, Lorem  sit
2024-04-02 13:57:58 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7437260868778508298, "id": 1908174576097692597, "text": "amet, sit amet, Lorem  Elasticsearch amet, Lorem  sit", "createdAt": 1712080678000}' to topic='twitter-topic'
2024-04-02 13:57:58 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:57:59 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  amet, dolor Lorem  sit dolor dolor Kafka amet, ipsum amet, Lorem  Lorem  Lorem
2024-04-02 13:57:59 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8363826793808196041, "id": 6774979161654977007, "text": "Lorem  amet, dolor Lorem  sit dolor dolor Kafka amet, ipsum amet, Lorem  Lorem  Lorem", "createdAt": 1712080679000}' to topic='twitter-topic'
2024-04-02 13:57:59 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 13:58:00 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 13:58:00 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 13:58:00 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 13:58:00 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 13:58:00 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor dolor amet, Spring Lorem  dolor
2024-04-02 13:58:00 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8913469570253259163, "id": 8326657069968823606, "text": "dolor dolor amet, Spring Lorem  dolor", "createdAt": 1712080680000}' to topic='twitter-topic'
2024-04-02 13:58:00 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.config.ConfigException: Invalid value io.confluent.kafka.serializer.KafkaAvroSerializer for configuration value.serializer: Class io.confluent.kafka.serializer.KafkaAvroSerializer could not be found.
	at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:747)
	at org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:493)
	at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:486)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:112)
	at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:132)
	at org.apache.kafka.clients.producer.ProducerConfig.<init>(ProducerConfig.java:592)
	at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:287)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createRawProducer(DefaultKafkaProducerFactory.java:913)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createKafkaProducer(DefaultKafkaProducerFactory.java:812)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.doCreateProducer(DefaultKafkaProducerFactory.java:779)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:754)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory.createProducer(DefaultKafkaProducerFactory.java:748)
	at org.springframework.kafka.core.KafkaTemplate.getTheProducer(KafkaTemplate.java:946)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:795)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-04-02 14:02:28 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 43704 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 14:02:28 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 14:02:30 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 14:02:30 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 14:02:30 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 14:02:30 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712080950984
2024-04-02 14:02:32 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 14:02:32 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 4.308 seconds (process running for 5.711)
2024-04-02 14:02:32 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 14:02:32 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 14:02:32 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 14:02:32 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 14:02:32 [main] INFO  c.j.m.t.i.i.KafkaStreamInitializer - Topics with name twitter-topic is ready for operations!
2024-04-02 14:02:32 [main] INFO  c.j.m.t.r.impl.MockKafkaStreamRunner - Starting mock filtering stream for keywords [Java, Microservices, Spring, Kafka, Elasticsearch]
2024-04-02 14:02:32 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit ipsum ipsum Lorem  dolor ipsum Lorem  Java sit sit sit Lorem  ipsum amet, amet,
2024-04-02 14:02:32 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2314843543955109423, "id": 8212722728883110957, "text": "Lorem  sit ipsum ipsum Lorem  dolor ipsum Lorem  Java sit sit sit Lorem  ipsum amet, amet,", "createdAt": 1712080952000}' to topic='twitter-topic'
2024-04-02 14:02:32 [pool-4-thread-1] INFO  o.a.k.c.producer.ProducerConfig - ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 1638400
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.LongSerializer
	linger.ms = 5
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 60000
	retries = 5
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer

2024-04-02 14:02:32 [pool-4-thread-1] INFO  i.c.k.s.KafkaAvroSerializerConfig - KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [schema.registry.url]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy

2024-04-02 14:02:33 [pool-4-thread-1] INFO  o.a.k.clients.producer.KafkaProducer - [Producer clientId=producer-1] Instantiated an idempotent producer.
2024-04-02 14:02:33 [pool-4-thread-1] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 14:02:33 [pool-4-thread-1] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 14:02:33 [pool-4-thread-1] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712080953037
2024-04-02 14:02:33 [kafka-producer-network-thread | producer-1] INFO  org.apache.kafka.clients.Metadata - [Producer clientId=producer-1] Cluster ID: N12cirbeTD-soLVEQtE1yA
2024-04-02 14:02:33 [kafka-producer-network-thread | producer-1] INFO  o.a.k.c.p.i.TransactionManager - [Producer clientId=producer-1] ProducerId set to 5000 with epoch 0
2024-04-02 14:02:33 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:02:34 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  Lorem  dolor ipsum ipsum dolor Kafka amet, amet, Lorem  sit
2024-04-02 14:02:34 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8532042243625160425, "id": 6832137340388461879, "text": "Lorem  Lorem  dolor ipsum ipsum dolor Kafka amet, amet, Lorem  sit", "createdAt": 1712080954000}' to topic='twitter-topic'
2024-04-02 14:02:34 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:02:35 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum ipsum sit sit amet, dolor Elasticsearch sit sit Lorem  ipsum Lorem  sit
2024-04-02 14:02:35 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1284338841409267069, "id": 1040569535008204063, "text": "Lorem  ipsum ipsum sit sit amet, dolor Elasticsearch sit sit Lorem  ipsum Lorem  sit", "createdAt": 1712080955000}' to topic='twitter-topic'
2024-04-02 14:02:35 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:02:36 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit amet, dolor dolor ipsum Microservices dolor Lorem  Lorem  sit
2024-04-02 14:02:36 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7338011920392338337, "id": 7218483405815473538, "text": "dolor sit amet, dolor dolor ipsum Microservices dolor Lorem  Lorem  sit", "createdAt": 1712080956000}' to topic='twitter-topic'
2024-04-02 14:02:36 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:02:37 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit dolor Lorem  ipsum Microservices sit sit dolor Lorem
2024-04-02 14:02:37 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 212224830144086206, "id": 7008679183797130889, "text": "dolor sit dolor Lorem  ipsum Microservices sit sit dolor Lorem", "createdAt": 1712080957000}' to topic='twitter-topic'
2024-04-02 14:02:37 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:02:38 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum amet, sit dolor sit Lorem  ipsum ipsum Java amet, Lorem  sit Lorem  ipsum amet, Lorem
2024-04-02 14:02:38 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7296652831204897968, "id": 4877047315726152791, "text": "ipsum amet, sit dolor sit Lorem  ipsum ipsum Java amet, Lorem  sit Lorem  ipsum amet, Lorem", "createdAt": 1712080958000}' to topic='twitter-topic'
2024-04-02 14:02:38 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:02:39 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit dolor ipsum sit Lorem  Kafka ipsum sit sit Lorem  Lorem
2024-04-02 14:02:39 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4870113923857222214, "id": 1105149141002545832, "text": "Lorem  sit dolor ipsum sit Lorem  Kafka ipsum sit sit Lorem  Lorem", "createdAt": 1712080959000}' to topic='twitter-topic'
2024-04-02 14:02:39 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:02:40 [SpringApplicationShutdownHook] INFO  o.a.k.clients.producer.KafkaProducer - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2024-04-02 14:02:40 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 14:02:40 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 14:02:40 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 14:02:40 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.producer for producer-1 unregistered
2024-04-02 14:02:40 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 14:02:40 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 14:02:40 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 14:02:40 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 14:02:40 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, amet, Lorem  dolor ipsum Microservices dolor dolor amet,
2024-04-02 14:02:40 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6170612918752109718, "id": 1321580198622931304, "text": "amet, amet, Lorem  dolor ipsum Microservices dolor dolor amet,", "createdAt": 1712080960000}' to topic='twitter-topic'
2024-04-02 14:02:40 [pool-4-thread-1] INFO  o.a.k.c.producer.ProducerConfig - ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 1638400
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-2
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.LongSerializer
	linger.ms = 5
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 60000
	retries = 5
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer

2024-04-02 14:12:43 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 45748 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 14:12:43 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 14:12:45 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 14:12:45 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 14:12:45 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 14:12:45 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712081565962
2024-04-02 14:12:47 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 14:12:47 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 4.41 seconds (process running for 5.679)
2024-04-02 14:12:47 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 14:12:47 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 14:12:47 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 14:12:47 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 14:12:47 [main] INFO  c.j.m.t.i.i.KafkaStreamInitializer - Topics with name twitter-topic is ready for operations!
2024-04-02 14:12:47 [main] INFO  c.j.m.t.r.impl.MockKafkaStreamRunner - Starting mock filtering stream for keywords [Java, Microservices, Spring, Kafka, Elasticsearch]
2024-04-02 14:12:47 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor ipsum amet, Lorem  amet, amet, Spring ipsum ipsum ipsum Lorem  amet,
2024-04-02 14:12:47 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5818527047453484680, "id": 770668112711138377, "text": "sit dolor ipsum amet, Lorem  amet, amet, Spring ipsum ipsum ipsum Lorem  amet,", "createdAt": 1712081567000}' to topic='twitter-topic'
2024-04-02 14:12:48 [pool-4-thread-1] INFO  o.a.k.c.producer.ProducerConfig - ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 1638400
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.LongSerializer
	linger.ms = 5
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 60000
	retries = 5
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer

2024-04-02 14:12:48 [pool-4-thread-1] INFO  i.c.k.s.KafkaAvroSerializerConfig - KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [schema.registry.url]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy

2024-04-02 14:12:48 [pool-4-thread-1] INFO  o.a.k.clients.producer.KafkaProducer - [Producer clientId=producer-1] Instantiated an idempotent producer.
2024-04-02 14:12:48 [pool-4-thread-1] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 14:12:48 [pool-4-thread-1] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 14:12:48 [pool-4-thread-1] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712081568091
2024-04-02 14:12:48 [kafka-producer-network-thread | producer-1] INFO  org.apache.kafka.clients.Metadata - [Producer clientId=producer-1] Cluster ID: N12cirbeTD-soLVEQtE1yA
2024-04-02 14:12:48 [kafka-producer-network-thread | producer-1] INFO  o.a.k.c.p.i.TransactionManager - [Producer clientId=producer-1] ProducerId set to 7000 with epoch 0
2024-04-02 14:12:48 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:49 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  amet, Lorem  ipsum ipsum Spring sit dolor ipsum ipsum
2024-04-02 14:12:49 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8633053603836749656, "id": 6402889425525013350, "text": "Lorem  amet, Lorem  ipsum ipsum Spring sit dolor ipsum ipsum", "createdAt": 1712081569000}' to topic='twitter-topic'
2024-04-02 14:12:49 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:50 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  amet, amet, Lorem  sit Java sit Lorem  amet, sit
2024-04-02 14:12:50 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6844326838271070173, "id": 693571491071420473, "text": "Lorem  amet, amet, Lorem  sit Java sit Lorem  amet, sit", "createdAt": 1712081570000}' to topic='twitter-topic'
2024-04-02 14:12:50 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:51 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit ipsum dolor sit sit sit Kafka dolor ipsum Lorem  amet, sit
2024-04-02 14:12:51 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1346490562806990522, "id": 1326213497357098060, "text": "sit sit ipsum dolor sit sit sit Kafka dolor ipsum Lorem  amet, sit", "createdAt": 1712081571000}' to topic='twitter-topic'
2024-04-02 14:12:51 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:52 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit amet, ipsum Spring sit ipsum
2024-04-02 14:12:52 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4933119505589642647, "id": 6802530470798691339, "text": "sit sit amet, ipsum Spring sit ipsum", "createdAt": 1712081572000}' to topic='twitter-topic'
2024-04-02 14:12:52 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:53 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor Lorem  sit Spring Lorem  sit
2024-04-02 14:12:53 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 240974916204256959, "id": 4980563495948027026, "text": "amet, dolor Lorem  sit Spring Lorem  sit", "createdAt": 1712081573000}' to topic='twitter-topic'
2024-04-02 14:12:53 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:54 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  dolor Lorem  amet, Lorem  Lorem  Kafka amet, dolor amet, amet,
2024-04-02 14:12:54 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3074858171686224522, "id": 3813105167908699265, "text": "Lorem  dolor Lorem  amet, Lorem  Lorem  Kafka amet, dolor amet, amet,", "createdAt": 1712081574000}' to topic='twitter-topic'
2024-04-02 14:12:54 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:55 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum Lorem  dolor Lorem  Lorem  Microservices Lorem  amet, ipsum Lorem
2024-04-02 14:12:55 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3064997031435258722, "id": 417863810736889888, "text": "ipsum Lorem  dolor Lorem  Lorem  Microservices Lorem  amet, ipsum Lorem", "createdAt": 1712081575000}' to topic='twitter-topic'
2024-04-02 14:12:55 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:56 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum sit amet, ipsum Lorem  ipsum Lorem  Kafka dolor dolor ipsum ipsum ipsum sit
2024-04-02 14:12:56 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5622583192251532182, "id": 1698041344655850528, "text": "ipsum sit amet, ipsum Lorem  ipsum Lorem  Kafka dolor dolor ipsum ipsum ipsum sit", "createdAt": 1712081576000}' to topic='twitter-topic'
2024-04-02 14:12:56 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:57 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit ipsum dolor amet, dolor ipsum sit Kafka Lorem  dolor ipsum Lorem  sit amet, dolor
2024-04-02 14:12:57 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1908158458070401183, "id": 6941220385525584125, "text": "Lorem  sit ipsum dolor amet, dolor ipsum sit Kafka Lorem  dolor ipsum Lorem  sit amet, dolor", "createdAt": 1712081577000}' to topic='twitter-topic'
2024-04-02 14:12:57 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:58 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor amet, dolor sit amet, Microservices dolor dolor dolor ipsum
2024-04-02 14:12:58 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1218807260958433679, "id": 5334640860023128294, "text": "ipsum dolor amet, dolor sit amet, Microservices dolor dolor dolor ipsum", "createdAt": 1712081578000}' to topic='twitter-topic'
2024-04-02 14:12:58 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:12:59 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit amet, sit Lorem  dolor Lorem  Lorem  Java Lorem  ipsum sit sit ipsum
2024-04-02 14:12:59 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5029984650809948141, "id": 2044987710130877518, "text": "sit amet, sit Lorem  dolor Lorem  Lorem  Java Lorem  ipsum sit sit ipsum", "createdAt": 1712081579000}' to topic='twitter-topic'
2024-04-02 14:12:59 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:00 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit dolor sit Kafka amet, sit ipsum
2024-04-02 14:13:00 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 642340915109081925, "id": 2818614769840261703, "text": "sit sit dolor sit Kafka amet, sit ipsum", "createdAt": 1712081580000}' to topic='twitter-topic'
2024-04-02 14:13:00 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:01 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  dolor ipsum Lorem  amet, sit Microservices dolor ipsum sit amet, sit
2024-04-02 14:13:01 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1366388222621494054, "id": 384887953960983902, "text": "Lorem  dolor ipsum Lorem  amet, sit Microservices dolor ipsum sit amet, sit", "createdAt": 1712081581000}' to topic='twitter-topic'
2024-04-02 14:13:01 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:02 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum Lorem  sit Spring sit ipsum dolor
2024-04-02 14:13:02 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7128826159542038993, "id": 8898111566052684260, "text": "dolor ipsum Lorem  sit Spring sit ipsum dolor", "createdAt": 1712081582000}' to topic='twitter-topic'
2024-04-02 14:13:02 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:03 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor Lorem  dolor amet, dolor ipsum Spring dolor Lorem  ipsum ipsum amet,
2024-04-02 14:13:03 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8151473349686914381, "id": 2749000813254893329, "text": "amet, dolor Lorem  dolor amet, dolor ipsum Spring dolor Lorem  ipsum ipsum amet,", "createdAt": 1712081583000}' to topic='twitter-topic'
2024-04-02 14:13:03 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:04 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit ipsum dolor amet, sit ipsum Spring dolor sit amet, Lorem  sit sit
2024-04-02 14:13:04 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2652626930139054813, "id": 5331244170935286310, "text": "amet, sit ipsum dolor amet, sit ipsum Spring dolor sit amet, Lorem  sit sit", "createdAt": 1712081584000}' to topic='twitter-topic'
2024-04-02 14:13:04 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:05 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum ipsum sit ipsum Lorem  Kafka dolor sit amet, Lorem
2024-04-02 14:13:05 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4270831102920528454, "id": 361743601100165389, "text": "sit ipsum ipsum sit ipsum Lorem  Kafka dolor sit amet, Lorem", "createdAt": 1712081585000}' to topic='twitter-topic'
2024-04-02 14:13:05 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:06 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  Lorem  amet, Elasticsearch amet, dolor
2024-04-02 14:13:06 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1686701410626945382, "id": 7473605740977057962, "text": "Lorem  Lorem  amet, Elasticsearch amet, dolor", "createdAt": 1712081586000}' to topic='twitter-topic'
2024-04-02 14:13:06 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:07 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum Lorem  Kafka amet, sit
2024-04-02 14:13:07 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4666548681065488318, "id": 7116168943148752394, "text": "sit ipsum Lorem  Kafka amet, sit", "createdAt": 1712081587000}' to topic='twitter-topic'
2024-04-02 14:13:07 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:08 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor sit Java amet, amet,
2024-04-02 14:13:08 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 883133459489477729, "id": 2809945283615086797, "text": "sit dolor sit Java amet, amet,", "createdAt": 1712081588000}' to topic='twitter-topic'
2024-04-02 14:13:08 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:09 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum Lorem  sit Kafka sit ipsum Lorem
2024-04-02 14:13:09 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5723241693233573417, "id": 8648956522372076081, "text": "Lorem  ipsum Lorem  sit Kafka sit ipsum Lorem", "createdAt": 1712081589000}' to topic='twitter-topic'
2024-04-02 14:13:09 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:10 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum Lorem  sit amet, dolor Spring sit Lorem  amet, sit
2024-04-02 14:13:10 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8797354048658745254, "id": 2409100472297200868, "text": "sit ipsum Lorem  sit amet, dolor Spring sit Lorem  amet, sit", "createdAt": 1712081590000}' to topic='twitter-topic'
2024-04-02 14:13:10 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:11 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit amet, amet, dolor ipsum ipsum Lorem  Java Lorem  Lorem  ipsum amet, ipsum sit
2024-04-02 14:13:11 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1979115040252371465, "id": 4847004973589670143, "text": "sit sit amet, amet, dolor ipsum ipsum Lorem  Java Lorem  Lorem  ipsum amet, ipsum sit", "createdAt": 1712081591000}' to topic='twitter-topic'
2024-04-02 14:13:11 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:12 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum amet, sit ipsum Lorem  dolor ipsum dolor Java ipsum Lorem  Lorem  dolor amet, ipsum Lorem
2024-04-02 14:13:12 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 9079361791842617827, "id": 6468382643399285481, "text": "ipsum amet, sit ipsum Lorem  dolor ipsum dolor Java ipsum Lorem  Lorem  dolor amet, ipsum Lorem", "createdAt": 1712081592000}' to topic='twitter-topic'
2024-04-02 14:13:12 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:13 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit Lorem  dolor ipsum Elasticsearch Lorem  dolor dolor amet,
2024-04-02 14:13:13 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3965541918373298560, "id": 7748375595643775495, "text": "sit sit Lorem  dolor ipsum Elasticsearch Lorem  dolor dolor amet,", "createdAt": 1712081593000}' to topic='twitter-topic'
2024-04-02 14:13:13 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:14 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor amet, ipsum ipsum Microservices Lorem  dolor Lorem  Lorem
2024-04-02 14:13:14 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7138327983899863656, "id": 5975692153180965885, "text": "ipsum dolor amet, ipsum ipsum Microservices Lorem  dolor Lorem  Lorem", "createdAt": 1712081594000}' to topic='twitter-topic'
2024-04-02 14:13:14 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:15 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor amet, sit sit sit Kafka Lorem  sit sit dolor sit
2024-04-02 14:13:15 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4443918908161840974, "id": 8559946985243964574, "text": "sit dolor amet, sit sit sit Kafka Lorem  sit sit dolor sit", "createdAt": 1712081595000}' to topic='twitter-topic'
2024-04-02 14:13:15 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:16 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  ipsum amet, ipsum Lorem  Spring Lorem  Lorem  amet, dolor amet,
2024-04-02 14:13:16 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2495129728341673734, "id": 3524705353625200278, "text": "dolor Lorem  ipsum amet, ipsum Lorem  Spring Lorem  Lorem  amet, dolor amet,", "createdAt": 1712081596000}' to topic='twitter-topic'
2024-04-02 14:13:16 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:17 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit ipsum sit sit sit Spring sit ipsum sit Lorem
2024-04-02 14:13:17 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4895122994274685866, "id": 4923036878652604198, "text": "dolor sit ipsum sit sit sit Spring sit ipsum sit Lorem", "createdAt": 1712081597000}' to topic='twitter-topic'
2024-04-02 14:13:17 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:18 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  dolor dolor Lorem  sit sit dolor Elasticsearch sit amet, amet, sit Lorem
2024-04-02 14:13:18 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1253351184586736031, "id": 3414115272005028459, "text": "Lorem  dolor dolor Lorem  sit sit dolor Elasticsearch sit amet, amet, sit Lorem", "createdAt": 1712081598000}' to topic='twitter-topic'
2024-04-02 14:13:18 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:19 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor Lorem  Lorem  ipsum Spring Lorem  sit sit sit
2024-04-02 14:13:19 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4764263522561907108, "id": 3669478477050941048, "text": "amet, dolor Lorem  Lorem  ipsum Spring Lorem  sit sit sit", "createdAt": 1712081599000}' to topic='twitter-topic'
2024-04-02 14:13:19 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:20 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit sit Lorem  amet, Java ipsum amet, amet,
2024-04-02 14:13:20 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5520486526772425501, "id": 3103585667995152917, "text": "amet, sit sit Lorem  amet, Java ipsum amet, amet,", "createdAt": 1712081600000}' to topic='twitter-topic'
2024-04-02 14:13:20 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:21 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit dolor amet, amet, ipsum amet, Lorem  Spring ipsum amet, ipsum dolor Lorem  Lorem  Lorem
2024-04-02 14:13:21 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6514315130927017614, "id": 8158937909695479210, "text": "Lorem  sit dolor amet, amet, ipsum amet, Lorem  Spring ipsum amet, ipsum dolor Lorem  Lorem  Lorem", "createdAt": 1712081601000}' to topic='twitter-topic'
2024-04-02 14:13:21 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:22 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum amet, dolor Kafka amet, sit ipsum
2024-04-02 14:13:22 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4787463738713524684, "id": 7767122423694583560, "text": "sit ipsum amet, dolor Kafka amet, sit ipsum", "createdAt": 1712081602000}' to topic='twitter-topic'
2024-04-02 14:13:22 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:23 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit amet, amet, Microservices dolor amet,
2024-04-02 14:13:23 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5472593415945436574, "id": 2018547288137184729, "text": "dolor sit amet, amet, Microservices dolor amet,", "createdAt": 1712081603000}' to topic='twitter-topic'
2024-04-02 14:13:23 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:24 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, Lorem  Lorem  Lorem  dolor ipsum dolor Kafka Lorem  amet, Lorem  ipsum sit
2024-04-02 14:13:24 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2931445166595523954, "id": 8276447073320774271, "text": "amet, Lorem  Lorem  Lorem  dolor ipsum dolor Kafka Lorem  amet, Lorem  ipsum sit", "createdAt": 1712081604000}' to topic='twitter-topic'
2024-04-02 14:13:24 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:25 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum amet, dolor ipsum sit sit Java amet, amet, ipsum ipsum amet, dolor
2024-04-02 14:13:25 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8015028291234188312, "id": 2133960410683494495, "text": "dolor ipsum amet, dolor ipsum sit sit Java amet, amet, ipsum ipsum amet, dolor", "createdAt": 1712081605000}' to topic='twitter-topic'
2024-04-02 14:13:25 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:26 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  Lorem  Lorem  ipsum sit sit sit Spring amet, Lorem  dolor amet, ipsum amet, sit
2024-04-02 14:13:26 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1549855794369591448, "id": 1993482251853933413, "text": "dolor Lorem  Lorem  Lorem  ipsum sit sit sit Spring amet, Lorem  dolor amet, ipsum amet, sit", "createdAt": 1712081606000}' to topic='twitter-topic'
2024-04-02 14:13:26 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:27 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  sit ipsum Java amet, dolor ipsum
2024-04-02 14:13:27 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4793275636960059695, "id": 8303036299747187124, "text": "sit Lorem  sit ipsum Java amet, dolor ipsum", "createdAt": 1712081607000}' to topic='twitter-topic'
2024-04-02 14:13:27 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:28 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor ipsum ipsum Elasticsearch dolor sit
2024-04-02 14:13:28 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2815470022698395524, "id": 7534585902420183538, "text": "amet, dolor ipsum ipsum Elasticsearch dolor sit", "createdAt": 1712081608000}' to topic='twitter-topic'
2024-04-02 14:13:28 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:29 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit amet, amet, ipsum dolor dolor sit Microservices Lorem  dolor dolor Lorem  sit ipsum
2024-04-02 14:13:29 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4065486462225078082, "id": 8930521260699307495, "text": "sit amet, amet, ipsum dolor dolor sit Microservices Lorem  dolor dolor Lorem  sit ipsum", "createdAt": 1712081609000}' to topic='twitter-topic'
2024-04-02 14:13:29 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:30 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum dolor dolor dolor sit amet, Spring amet, Lorem  amet, ipsum Lorem  amet,
2024-04-02 14:13:30 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3855427748838118369, "id": 5115556550371074378, "text": "dolor ipsum dolor dolor dolor sit amet, Spring amet, Lorem  amet, ipsum Lorem  amet,", "createdAt": 1712081610000}' to topic='twitter-topic'
2024-04-02 14:13:30 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:31 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor ipsum dolor ipsum Lorem  sit ipsum Spring ipsum ipsum ipsum dolor ipsum dolor sit
2024-04-02 14:13:31 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5846291460209249510, "id": 3824762718861029501, "text": "amet, dolor ipsum dolor ipsum Lorem  sit ipsum Spring ipsum ipsum ipsum dolor ipsum dolor sit", "createdAt": 1712081611000}' to topic='twitter-topic'
2024-04-02 14:13:31 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:32 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum sit Lorem  ipsum amet, Elasticsearch amet, amet, ipsum sit
2024-04-02 14:13:32 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5459981005536908491, "id": 3126485616639196068, "text": "Lorem  ipsum sit Lorem  ipsum amet, Elasticsearch amet, amet, ipsum sit", "createdAt": 1712081612000}' to topic='twitter-topic'
2024-04-02 14:13:32 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:33 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum amet, ipsum Lorem  dolor amet, Kafka ipsum Lorem  dolor ipsum dolor amet,
2024-04-02 14:13:33 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7865100402809450216, "id": 2379050939160899876, "text": "dolor ipsum amet, ipsum Lorem  dolor amet, Kafka ipsum Lorem  dolor ipsum dolor amet,", "createdAt": 1712081613000}' to topic='twitter-topic'
2024-04-02 14:13:33 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:34 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum ipsum dolor sit ipsum Elasticsearch sit dolor ipsum dolor
2024-04-02 14:13:34 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6038661080810712535, "id": 2623244138106056639, "text": "ipsum ipsum dolor sit ipsum Elasticsearch sit dolor ipsum dolor", "createdAt": 1712081614000}' to topic='twitter-topic'
2024-04-02 14:13:34 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:35 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum Lorem  ipsum amet, ipsum Lorem  Spring sit dolor dolor amet, dolor
2024-04-02 14:13:35 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 23967543264520327, "id": 163251152272317800, "text": "sit ipsum Lorem  ipsum amet, ipsum Lorem  Spring sit dolor dolor amet, dolor", "createdAt": 1712081615000}' to topic='twitter-topic'
2024-04-02 14:13:35 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:36 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit ipsum amet, sit Lorem  ipsum amet, Spring sit amet, amet, amet, Lorem  dolor dolor
2024-04-02 14:13:36 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8987461892832354867, "id": 1832564452914698248, "text": "amet, sit ipsum amet, sit Lorem  ipsum amet, Spring sit amet, amet, amet, Lorem  dolor dolor", "createdAt": 1712081616000}' to topic='twitter-topic'
2024-04-02 14:13:36 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:37 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, Lorem  dolor Lorem  Microservices Lorem  amet, Lorem
2024-04-02 14:13:37 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5333518775901698230, "id": 6867044315679530350, "text": "amet, Lorem  dolor Lorem  Microservices Lorem  amet, Lorem", "createdAt": 1712081617000}' to topic='twitter-topic'
2024-04-02 14:13:37 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:38 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum dolor sit Elasticsearch ipsum sit dolor
2024-04-02 14:13:38 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5926195483304895362, "id": 212609444354412109, "text": "Lorem  ipsum dolor sit Elasticsearch ipsum sit dolor", "createdAt": 1712081618000}' to topic='twitter-topic'
2024-04-02 14:13:38 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:39 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  Lorem  dolor ipsum sit ipsum ipsum dolor Java amet, ipsum Lorem  Lorem  ipsum sit dolor
2024-04-02 14:13:39 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6157056536159814901, "id": 4151515071062135301, "text": "Lorem  Lorem  dolor ipsum sit ipsum ipsum dolor Java amet, ipsum Lorem  Lorem  ipsum sit dolor", "createdAt": 1712081619000}' to topic='twitter-topic'
2024-04-02 14:13:39 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:40 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, ipsum amet, amet, ipsum dolor Lorem  Lorem  Elasticsearch sit ipsum amet, Lorem  dolor dolor
2024-04-02 14:13:40 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2893318403853232047, "id": 2694348796595135398, "text": "amet, ipsum amet, amet, ipsum dolor Lorem  Lorem  Elasticsearch sit ipsum amet, Lorem  dolor dolor", "createdAt": 1712081620000}' to topic='twitter-topic'
2024-04-02 14:13:40 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:41 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum Lorem  sit sit amet, Lorem  dolor Java sit sit ipsum ipsum Lorem  ipsum
2024-04-02 14:13:41 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6168369615924565602, "id": 7474147110311308518, "text": "ipsum Lorem  sit sit amet, Lorem  dolor Java sit sit ipsum ipsum Lorem  ipsum", "createdAt": 1712081621000}' to topic='twitter-topic'
2024-04-02 14:13:41 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:42 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit sit sit amet, Lorem  Elasticsearch amet, amet, Lorem  ipsum
2024-04-02 14:13:42 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3670571670852059697, "id": 8193110094571443567, "text": "sit sit sit sit amet, Lorem  Elasticsearch amet, amet, Lorem  ipsum", "createdAt": 1712081622000}' to topic='twitter-topic'
2024-04-02 14:13:42 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:43 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit amet, ipsum dolor ipsum Lorem  sit Kafka Lorem  ipsum dolor sit dolor sit
2024-04-02 14:13:43 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1052414158617648418, "id": 1628762201697579189, "text": "Lorem  sit amet, ipsum dolor ipsum Lorem  sit Kafka Lorem  ipsum dolor sit dolor sit", "createdAt": 1712081623000}' to topic='twitter-topic'
2024-04-02 14:13:43 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:44 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit dolor ipsum ipsum sit Microservices Lorem  amet, dolor sit
2024-04-02 14:13:44 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6861826846197094687, "id": 3314833946824892148, "text": "amet, sit dolor ipsum ipsum sit Microservices Lorem  amet, dolor sit", "createdAt": 1712081624000}' to topic='twitter-topic'
2024-04-02 14:13:44 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:45 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum amet, ipsum sit Microservices amet, dolor Lorem  sit
2024-04-02 14:13:45 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 137700255539407907, "id": 8907408933059804746, "text": "Lorem  ipsum amet, ipsum sit Microservices amet, dolor Lorem  sit", "createdAt": 1712081625000}' to topic='twitter-topic'
2024-04-02 14:13:45 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:46 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum amet, amet, ipsum dolor Lorem  Microservices dolor sit amet, ipsum Lorem
2024-04-02 14:13:46 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7036479047174315851, "id": 4624900002194201778, "text": "dolor ipsum amet, amet, ipsum dolor Lorem  Microservices dolor sit amet, ipsum Lorem", "createdAt": 1712081626000}' to topic='twitter-topic'
2024-04-02 14:13:46 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:47 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor sit Lorem  dolor Lorem  amet, Spring ipsum amet, sit sit Lorem  ipsum
2024-04-02 14:13:47 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1486558166434249886, "id": 4189096971176803114, "text": "ipsum dolor sit Lorem  dolor Lorem  amet, Spring ipsum amet, sit sit Lorem  ipsum", "createdAt": 1712081627000}' to topic='twitter-topic'
2024-04-02 14:13:47 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:48 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum ipsum sit ipsum sit amet, Elasticsearch ipsum ipsum amet, amet, dolor
2024-04-02 14:13:48 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1877318108846573568, "id": 6604976043474755437, "text": "ipsum ipsum sit ipsum sit amet, Elasticsearch ipsum ipsum amet, amet, dolor", "createdAt": 1712081628000}' to topic='twitter-topic'
2024-04-02 14:13:48 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:49 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit dolor amet, Elasticsearch sit sit
2024-04-02 14:13:49 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7699647083916026969, "id": 3147057608140898888, "text": "Lorem  sit dolor amet, Elasticsearch sit sit", "createdAt": 1712081629000}' to topic='twitter-topic'
2024-04-02 14:13:49 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:50 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit sit dolor Lorem  Java ipsum sit ipsum
2024-04-02 14:13:50 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 69553690523900793, "id": 1913631917339864229, "text": "sit sit sit dolor Lorem  Java ipsum sit ipsum", "createdAt": 1712081630000}' to topic='twitter-topic'
2024-04-02 14:13:50 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:51 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  Lorem  sit sit amet, sit amet, ipsum Spring amet, sit ipsum ipsum sit dolor
2024-04-02 14:13:51 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3757410416668119563, "id": 8902677750309480443, "text": "Lorem  Lorem  sit sit amet, sit amet, ipsum Spring amet, sit ipsum ipsum sit dolor", "createdAt": 1712081631000}' to topic='twitter-topic'
2024-04-02 14:13:51 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:52 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit sit dolor ipsum amet, dolor Kafka amet, dolor Lorem  dolor Lorem
2024-04-02 14:13:52 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5303403975761679069, "id": 8824767988258060466, "text": "dolor sit sit dolor ipsum amet, dolor Kafka amet, dolor Lorem  dolor Lorem", "createdAt": 1712081632000}' to topic='twitter-topic'
2024-04-02 14:13:52 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:53 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum sit amet, Lorem  ipsum amet, Java ipsum amet, dolor dolor ipsum
2024-04-02 14:13:53 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2344507006493845801, "id": 2191043118007556572, "text": "sit ipsum sit amet, Lorem  ipsum amet, Java ipsum amet, dolor dolor ipsum", "createdAt": 1712081633000}' to topic='twitter-topic'
2024-04-02 14:13:53 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:54 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum sit sit dolor amet, Java amet, Lorem  amet, dolor sit
2024-04-02 14:13:54 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2338269429009452321, "id": 3161877562265855962, "text": "sit ipsum sit sit dolor amet, Java amet, Lorem  amet, dolor sit", "createdAt": 1712081634000}' to topic='twitter-topic'
2024-04-02 14:13:54 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:55 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  dolor Lorem  ipsum dolor ipsum Java sit amet, dolor ipsum amet,
2024-04-02 14:13:55 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4414623648525314841, "id": 6042971554237290614, "text": "Lorem  dolor Lorem  ipsum dolor ipsum Java sit amet, dolor ipsum amet,", "createdAt": 1712081635000}' to topic='twitter-topic'
2024-04-02 14:13:55 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:56 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit amet, sit dolor dolor Java ipsum Lorem  amet, amet,
2024-04-02 14:13:56 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5370540585661813293, "id": 7457729345407009564, "text": "amet, sit amet, sit dolor dolor Java ipsum Lorem  amet, amet,", "createdAt": 1712081636000}' to topic='twitter-topic'
2024-04-02 14:13:56 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:57 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, amet, Lorem  sit sit dolor Lorem  Microservices sit sit Lorem  Lorem  ipsum
2024-04-02 14:13:57 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5473887806832615723, "id": 8872519409360383326, "text": "amet, amet, Lorem  sit sit dolor Lorem  Microservices sit sit Lorem  Lorem  ipsum", "createdAt": 1712081637000}' to topic='twitter-topic'
2024-04-02 14:13:57 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:58 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum amet, dolor amet, Java Lorem  amet, ipsum
2024-04-02 14:13:58 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6298854089856107172, "id": 179171074207979194, "text": "sit ipsum amet, dolor amet, Java Lorem  amet, ipsum", "createdAt": 1712081638000}' to topic='twitter-topic'
2024-04-02 14:13:58 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:13:59 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit ipsum dolor dolor ipsum Spring amet, amet, dolor Lorem
2024-04-02 14:13:59 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5982742237895409742, "id": 762411054570381345, "text": "dolor sit ipsum dolor dolor ipsum Spring amet, amet, dolor Lorem", "createdAt": 1712081639000}' to topic='twitter-topic'
2024-04-02 14:13:59 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:00 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, amet, ipsum Lorem  Elasticsearch dolor ipsum
2024-04-02 14:14:00 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 120212483489496189, "id": 5911370081884319558, "text": "amet, amet, ipsum Lorem  Elasticsearch dolor ipsum", "createdAt": 1712081640000}' to topic='twitter-topic'
2024-04-02 14:14:00 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:01 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, amet, ipsum ipsum dolor Lorem  Lorem  ipsum Kafka Lorem  dolor ipsum sit amet, Lorem  sit
2024-04-02 14:14:01 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3775295362599260127, "id": 4441674773636126730, "text": "amet, amet, ipsum ipsum dolor Lorem  Lorem  ipsum Kafka Lorem  dolor ipsum sit amet, Lorem  sit", "createdAt": 1712081641000}' to topic='twitter-topic'
2024-04-02 14:14:01 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:02 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum amet, dolor sit sit Java Lorem  Lorem  dolor sit Lorem
2024-04-02 14:14:02 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2038085368524045308, "id": 2224909836136229183, "text": "sit ipsum amet, dolor sit sit Java Lorem  Lorem  dolor sit Lorem", "createdAt": 1712081642000}' to topic='twitter-topic'
2024-04-02 14:14:02 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:03 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor dolor amet, ipsum Lorem  amet, Spring Lorem  ipsum dolor Lorem  sit
2024-04-02 14:14:03 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4448245474778727270, "id": 4955699357157349840, "text": "dolor dolor amet, ipsum Lorem  amet, Spring Lorem  ipsum dolor Lorem  sit", "createdAt": 1712081643000}' to topic='twitter-topic'
2024-04-02 14:14:03 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:05 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  amet, sit Java dolor dolor
2024-04-02 14:14:05 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8747792440730463276, "id": 8571276977525808776, "text": "Lorem  amet, sit Java dolor dolor", "createdAt": 1712081645000}' to topic='twitter-topic'
2024-04-02 14:14:05 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:06 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit dolor amet, amet, Lorem  ipsum Spring ipsum sit dolor Lorem  Lorem  amet,
2024-04-02 14:14:06 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8254238679932256623, "id": 8268401243767744366, "text": "Lorem  sit dolor amet, amet, Lorem  ipsum Spring ipsum sit dolor Lorem  Lorem  amet,", "createdAt": 1712081646000}' to topic='twitter-topic'
2024-04-02 14:14:06 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:07 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  Lorem  sit sit Lorem  Java ipsum sit sit Lorem
2024-04-02 14:14:07 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3179714254426110141, "id": 2536773542769880688, "text": "dolor Lorem  Lorem  sit sit Lorem  Java ipsum sit sit Lorem", "createdAt": 1712081647000}' to topic='twitter-topic'
2024-04-02 14:14:07 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:08 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit sit ipsum Lorem  amet, Kafka Lorem  Lorem  dolor sit
2024-04-02 14:14:08 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7612905232041957630, "id": 324760252808445641, "text": "Lorem  sit sit ipsum Lorem  amet, Kafka Lorem  Lorem  dolor sit", "createdAt": 1712081648000}' to topic='twitter-topic'
2024-04-02 14:14:08 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:09 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit Lorem  Spring amet, dolor
2024-04-02 14:14:09 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2135098919174946903, "id": 5976808530169353630, "text": "Lorem  sit Lorem  Spring amet, dolor", "createdAt": 1712081649000}' to topic='twitter-topic'
2024-04-02 14:14:09 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:10 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, ipsum ipsum dolor dolor amet, sit Elasticsearch ipsum amet, dolor dolor ipsum
2024-04-02 14:14:10 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5367054796339284662, "id": 1766528381702951231, "text": "amet, ipsum ipsum dolor dolor amet, sit Elasticsearch ipsum amet, dolor dolor ipsum", "createdAt": 1712081650000}' to topic='twitter-topic'
2024-04-02 14:14:10 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:11 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor Lorem  Elasticsearch ipsum amet,
2024-04-02 14:14:11 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8265697779389416051, "id": 915077268065657179, "text": "amet, dolor Lorem  Elasticsearch ipsum amet,", "createdAt": 1712081651000}' to topic='twitter-topic'
2024-04-02 14:14:11 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:12 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit dolor dolor Elasticsearch Lorem  Lorem
2024-04-02 14:14:12 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7214125020651989092, "id": 1744702250484151787, "text": "Lorem  sit dolor dolor Elasticsearch Lorem  Lorem", "createdAt": 1712081652000}' to topic='twitter-topic'
2024-04-02 14:14:12 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:13 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit dolor Lorem  dolor sit ipsum Lorem  Microservices amet, dolor Lorem  Lorem  amet, Lorem  dolor
2024-04-02 14:14:13 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1964163265632352414, "id": 3318929517434921866, "text": "Lorem  sit dolor Lorem  dolor sit ipsum Lorem  Microservices amet, dolor Lorem  Lorem  amet, Lorem  dolor", "createdAt": 1712081653000}' to topic='twitter-topic'
2024-04-02 14:14:13 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:14 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  amet, amet, sit Microservices Lorem  sit Lorem  Lorem
2024-04-02 14:14:14 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6618066777212757905, "id": 1845129860897672739, "text": "sit Lorem  amet, amet, sit Microservices Lorem  sit Lorem  Lorem", "createdAt": 1712081654000}' to topic='twitter-topic'
2024-04-02 14:14:14 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:15 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit dolor ipsum Elasticsearch dolor ipsum amet,
2024-04-02 14:14:15 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3124325497941803067, "id": 4046646583580400103, "text": "Lorem  sit dolor ipsum Elasticsearch dolor ipsum amet,", "createdAt": 1712081655000}' to topic='twitter-topic'
2024-04-02 14:14:15 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:16 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum dolor dolor Lorem  Microservices ipsum Lorem  amet, Lorem
2024-04-02 14:14:16 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6641494210089866036, "id": 2546566239533873274, "text": "sit ipsum dolor dolor Lorem  Microservices ipsum Lorem  amet, Lorem", "createdAt": 1712081656000}' to topic='twitter-topic'
2024-04-02 14:14:16 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:17 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  dolor dolor Lorem  Lorem  amet, dolor Elasticsearch ipsum amet, ipsum Lorem  sit ipsum
2024-04-02 14:14:17 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1699464307049430908, "id": 4838320905001832729, "text": "Lorem  dolor dolor Lorem  Lorem  amet, dolor Elasticsearch ipsum amet, ipsum Lorem  sit ipsum", "createdAt": 1712081657000}' to topic='twitter-topic'
2024-04-02 14:14:17 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:18 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit dolor Lorem  sit dolor Spring ipsum Lorem  dolor amet,
2024-04-02 14:14:18 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2566357475788673539, "id": 6590496605014939119, "text": "dolor sit dolor Lorem  sit dolor Spring ipsum Lorem  dolor amet,", "createdAt": 1712081658000}' to topic='twitter-topic'
2024-04-02 14:14:18 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:19 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  sit sit dolor Elasticsearch dolor dolor Lorem  sit
2024-04-02 14:14:19 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6031841647854984919, "id": 879917474053601270, "text": "dolor Lorem  sit sit dolor Elasticsearch dolor dolor Lorem  sit", "createdAt": 1712081659000}' to topic='twitter-topic'
2024-04-02 14:14:19 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:20 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit amet, Lorem  amet, dolor dolor Lorem  Microservices sit amet, amet, dolor ipsum amet, ipsum
2024-04-02 14:14:20 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2872528267309515222, "id": 2891049572524507513, "text": "Lorem  sit amet, Lorem  amet, dolor dolor Lorem  Microservices sit amet, amet, dolor ipsum amet, ipsum", "createdAt": 1712081660000}' to topic='twitter-topic'
2024-04-02 14:14:20 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:21 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit amet, dolor ipsum Java sit sit dolor
2024-04-02 14:14:21 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8367460011460473217, "id": 8692768419906638948, "text": "sit amet, dolor ipsum Java sit sit dolor", "createdAt": 1712081661000}' to topic='twitter-topic'
2024-04-02 14:14:21 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:22 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum ipsum amet, sit Elasticsearch ipsum dolor ipsum
2024-04-02 14:14:22 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3985727881899797040, "id": 606197507723955643, "text": "ipsum ipsum amet, sit Elasticsearch ipsum dolor ipsum", "createdAt": 1712081662000}' to topic='twitter-topic'
2024-04-02 14:14:22 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:23 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum ipsum ipsum dolor ipsum amet, dolor amet, Spring dolor dolor ipsum amet, amet, Lorem  amet,
2024-04-02 14:14:23 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6502252861962633510, "id": 7844653921106474304, "text": "ipsum ipsum ipsum dolor ipsum amet, dolor amet, Spring dolor dolor ipsum amet, amet, Lorem  amet,", "createdAt": 1712081663000}' to topic='twitter-topic'
2024-04-02 14:14:23 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:24 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum dolor Lorem  Kafka dolor dolor
2024-04-02 14:14:24 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8839872485409541583, "id": 8058335006294067841, "text": "dolor ipsum dolor Lorem  Kafka dolor dolor", "createdAt": 1712081664000}' to topic='twitter-topic'
2024-04-02 14:14:24 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:25 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit dolor ipsum amet, sit Elasticsearch amet, dolor sit dolor
2024-04-02 14:14:25 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5786528722802114450, "id": 2388437216620242340, "text": "amet, sit dolor ipsum amet, sit Elasticsearch amet, dolor sit dolor", "createdAt": 1712081665000}' to topic='twitter-topic'
2024-04-02 14:14:25 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:26 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, Lorem  dolor ipsum Spring ipsum dolor
2024-04-02 14:14:26 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 244902169169204173, "id": 7215689001377315313, "text": "amet, Lorem  dolor ipsum Spring ipsum dolor", "createdAt": 1712081666000}' to topic='twitter-topic'
2024-04-02 14:14:26 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:27 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:27 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit sit sit amet, dolor Kafka Lorem  dolor ipsum sit
2024-04-02 14:14:27 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5871096086086529113, "id": 326894524358697729, "text": "sit sit sit sit amet, dolor Kafka Lorem  dolor ipsum sit", "createdAt": 1712081667000}' to topic='twitter-topic'
2024-04-02 14:14:27 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:27 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -1 disconnected.
2024-04-02 14:14:28 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor dolor sit Spring dolor ipsum Lorem
2024-04-02 14:14:28 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 755892260627366970, "id": 784371320330724789, "text": "amet, dolor dolor sit Spring dolor ipsum Lorem", "createdAt": 1712081668000}' to topic='twitter-topic'
2024-04-02 14:14:28 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:29 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  dolor Lorem  Lorem  Lorem  amet, sit sit Kafka ipsum amet, dolor amet, ipsum Lorem  ipsum
2024-04-02 14:14:29 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5011501971959758714, "id": 7935978225682404360, "text": "Lorem  dolor Lorem  Lorem  Lorem  amet, sit sit Kafka ipsum amet, dolor amet, ipsum Lorem  ipsum", "createdAt": 1712081669000}' to topic='twitter-topic'
2024-04-02 14:14:29 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:30 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit amet, sit sit amet, Microservices amet, ipsum amet,
2024-04-02 14:14:30 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4706882946873304846, "id": 3233173636011827284, "text": "sit amet, sit sit amet, Microservices amet, ipsum amet,", "createdAt": 1712081670000}' to topic='twitter-topic'
2024-04-02 14:14:30 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:31 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor dolor ipsum dolor dolor ipsum Elasticsearch sit ipsum ipsum Lorem
2024-04-02 14:14:31 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7359978551677859732, "id": 5364434518713904253, "text": "dolor dolor ipsum dolor dolor ipsum Elasticsearch sit ipsum ipsum Lorem", "createdAt": 1712081671000}' to topic='twitter-topic'
2024-04-02 14:14:31 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:32 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum sit ipsum amet, amet, amet, Lorem  dolor Microservices ipsum dolor Lorem  dolor dolor amet, Lorem
2024-04-02 14:14:32 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8720646864877250595, "id": 1007622735953910942, "text": "ipsum sit ipsum amet, amet, amet, Lorem  dolor Microservices ipsum dolor Lorem  dolor dolor amet, Lorem", "createdAt": 1712081672000}' to topic='twitter-topic'
2024-04-02 14:14:32 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:33 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit amet, amet, ipsum dolor amet, Lorem  Microservices dolor Lorem  amet, sit amet, ipsum
2024-04-02 14:14:33 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5880270923499596461, "id": 9186390346289460838, "text": "sit amet, amet, ipsum dolor amet, Lorem  Microservices dolor Lorem  amet, sit amet, ipsum", "createdAt": 1712081673000}' to topic='twitter-topic'
2024-04-02 14:14:33 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:34 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum dolor dolor dolor ipsum Spring amet, sit Lorem  amet,
2024-04-02 14:14:34 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6608095174148904733, "id": 3005088544348778916, "text": "Lorem  ipsum dolor dolor dolor ipsum Spring amet, sit Lorem  amet,", "createdAt": 1712081674000}' to topic='twitter-topic'
2024-04-02 14:14:34 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:35 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum dolor dolor Spring ipsum dolor Lorem
2024-04-02 14:14:35 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3117139039608618713, "id": 2427858504704568368, "text": "sit ipsum dolor dolor Spring ipsum dolor Lorem", "createdAt": 1712081675000}' to topic='twitter-topic'
2024-04-02 14:14:35 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:36 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  Lorem  amet, sit Lorem  sit Kafka dolor sit amet, amet, ipsum
2024-04-02 14:14:36 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 689918112289839377, "id": 4393772953593734988, "text": "sit Lorem  Lorem  amet, sit Lorem  sit Kafka dolor sit amet, amet, ipsum", "createdAt": 1712081676000}' to topic='twitter-topic'
2024-04-02 14:14:36 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node -3 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 11 due to node 3 being disconnected (elapsed time since creation: 5ms, elapsed time since send: 5ms, request timeout: 3600000ms)
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 4 due to node 3 being disconnected (elapsed time since creation: 0ms, elapsed time since send: 0ms, request timeout: 60000ms)
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 12 due to node 3 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:36 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:37 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:37 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:37 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  dolor amet, Kafka sit dolor
2024-04-02 14:14:37 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 782691567490231289, "id": 92391462980659764, "text": "Lorem  dolor amet, Kafka sit dolor", "createdAt": 1712081677000}' to topic='twitter-topic'
2024-04-02 14:14:37 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:37 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:37 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:38 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:38 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:38 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:38 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:38 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:38 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit amet, Lorem  amet, ipsum dolor Spring amet, sit Lorem  dolor ipsum
2024-04-02 14:14:38 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8463304406700210747, "id": 3529631012310915789, "text": "sit sit amet, Lorem  amet, ipsum dolor Spring amet, sit Lorem  dolor ipsum", "createdAt": 1712081678000}' to topic='twitter-topic'
2024-04-02 14:14:38 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:38 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:38 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:38 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:38 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:38 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:39 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:39 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:39 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum Lorem  Lorem  ipsum amet, sit amet, Microservices Lorem  Lorem  Lorem  amet, dolor ipsum
2024-04-02 14:14:39 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6972168322146768497, "id": 5743484388927427366, "text": "sit ipsum Lorem  Lorem  ipsum amet, sit amet, Microservices Lorem  Lorem  Lorem  amet, dolor ipsum", "createdAt": 1712081679000}' to topic='twitter-topic'
2024-04-02 14:14:39 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:39 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:39 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:39 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:39 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:39 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:39 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:40 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:40 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:40 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:40 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  Lorem  amet, ipsum sit Lorem  Java ipsum amet, sit sit ipsum
2024-04-02 14:14:40 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5670043937110801914, "id": 5791071344472189271, "text": "Lorem  Lorem  amet, ipsum sit Lorem  Java ipsum amet, sit sit ipsum", "createdAt": 1712081680000}' to topic='twitter-topic'
2024-04-02 14:14:40 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:40 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:40 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:40 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:40 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:40 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:41 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:41 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:41 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:41 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:41 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, ipsum sit Elasticsearch dolor ipsum
2024-04-02 14:14:41 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4188730170928374430, "id": 5136728081797995412, "text": "amet, ipsum sit Elasticsearch dolor ipsum", "createdAt": 1712081681000}' to topic='twitter-topic'
2024-04-02 14:14:41 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:41 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:41 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:41 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:41 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:41 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:41 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:42 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:42 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:42 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:14:42 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, Lorem  ipsum Lorem  dolor ipsum dolor amet, Kafka amet, Lorem  dolor sit Lorem  ipsum
2024-04-02 14:14:42 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5505682839036654857, "id": 7332208831088367988, "text": "amet, Lorem  ipsum Lorem  dolor ipsum dolor amet, Kafka amet, Lorem  dolor sit Lorem  ipsum", "createdAt": 1712081682000}' to topic='twitter-topic'
2024-04-02 14:14:42 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:42 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 1 (localhost/127.0.0.1:19092) could not be established. Broker may not be available.
2024-04-02 14:14:42 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:42 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:42 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Connection to node 2 (localhost/127.0.0.1:29092) could not be established. Broker may not be available.
2024-04-02 14:14:43 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:43 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 13 due to node 1 being disconnected (elapsed time since creation: 11ms, elapsed time since send: 11ms, request timeout: 3600000ms)
2024-04-02 14:14:43 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:43 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 5 due to node 3 being disconnected (elapsed time since creation: 6ms, elapsed time since send: 6ms, request timeout: 60000ms)
2024-04-02 14:14:43 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:43 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 14 due to node 3 being disconnected (elapsed time since creation: 5ms, elapsed time since send: 5ms, request timeout: 3600000ms)
2024-04-02 14:14:43 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit ipsum amet, Lorem  Java amet, sit amet,
2024-04-02 14:14:43 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2500764668002907293, "id": 2956043046155922022, "text": "dolor sit ipsum amet, Lorem  Java amet, sit amet,", "createdAt": 1712081683000}' to topic='twitter-topic'
2024-04-02 14:14:43 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:43 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:43 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 6 due to node 1 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 60000ms)
2024-04-02 14:14:43 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:43 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 15 due to node 2 being disconnected (elapsed time since creation: 7ms, elapsed time since send: 7ms, request timeout: 3600000ms)
2024-04-02 14:14:43 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:43 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 7 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:44 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:44 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 16 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:44 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:44 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 8 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:44 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:44 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 17 due to node 3 being disconnected (elapsed time since creation: 6ms, elapsed time since send: 6ms, request timeout: 3600000ms)
2024-04-02 14:14:44 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum amet, dolor Java ipsum dolor sit
2024-04-02 14:14:44 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 9085458989238187077, "id": 476100804862747324, "text": "Lorem  ipsum amet, dolor Java ipsum dolor sit", "createdAt": 1712081684000}' to topic='twitter-topic'
2024-04-02 14:14:44 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:44 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:44 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 9 due to node 1 being disconnected (elapsed time since creation: 6ms, elapsed time since send: 6ms, request timeout: 60000ms)
2024-04-02 14:14:44 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:44 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 10 due to node 2 being disconnected (elapsed time since creation: 6ms, elapsed time since send: 6ms, request timeout: 60000ms)
2024-04-02 14:14:44 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:44 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 18 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:45 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:45 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 19 due to node 3 being disconnected (elapsed time since creation: 5ms, elapsed time since send: 5ms, request timeout: 3600000ms)
2024-04-02 14:14:45 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:45 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 11 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:45 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:45 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 20 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:45 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor sit amet, Lorem  Microservices sit sit ipsum Lorem
2024-04-02 14:14:45 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5505525524034979681, "id": 1826601448845316707, "text": "sit dolor sit amet, Lorem  Microservices sit sit ipsum Lorem", "createdAt": 1712081685000}' to topic='twitter-topic'
2024-04-02 14:14:45 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:45 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:45 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 12 due to node 1 being disconnected (elapsed time since creation: 1ms, elapsed time since send: 1ms, request timeout: 60000ms)
2024-04-02 14:14:45 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:45 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 13 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:46 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:46 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 21 due to node 2 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:46 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:46 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 22 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:46 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:46 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 14 due to node 3 being disconnected (elapsed time since creation: 1ms, elapsed time since send: 1ms, request timeout: 60000ms)
2024-04-02 14:14:46 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:46 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 23 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:46 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor dolor Lorem  Lorem  Microservices sit amet,
2024-04-02 14:14:46 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3633691365777072088, "id": 6620839352965496938, "text": "dolor dolor Lorem  Lorem  Microservices sit amet,", "createdAt": 1712081686000}' to topic='twitter-topic'
2024-04-02 14:14:46 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:46 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:46 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 15 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:46 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:46 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 16 due to node 2 being disconnected (elapsed time since creation: 1ms, elapsed time since send: 1ms, request timeout: 60000ms)
2024-04-02 14:14:47 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:47 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 17 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:47 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:47 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 24 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:47 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:47 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 25 due to node 1 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:47 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:47 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 26 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:47 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum amet, ipsum Java amet, amet,
2024-04-02 14:14:47 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 226833460477913813, "id": 1639980447394481087, "text": "dolor ipsum amet, ipsum Java amet, amet,", "createdAt": 1712081687000}' to topic='twitter-topic'
2024-04-02 14:14:47 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:47 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:47 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 18 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:47 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:47 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 19 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:47 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:47 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 27 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:48 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:48 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 20 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:48 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:48 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 28 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:48 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:48 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 29 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:48 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit Lorem  Microservices ipsum ipsum
2024-04-02 14:14:48 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2397160619088892302, "id": 939220251715341638, "text": "amet, sit Lorem  Microservices ipsum ipsum", "createdAt": 1712081688000}' to topic='twitter-topic'
2024-04-02 14:14:48 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:48 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:48 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 21 due to node 1 being disconnected (elapsed time since creation: 10ms, elapsed time since send: 10ms, request timeout: 60000ms)
2024-04-02 14:14:48 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:48 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 22 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:49 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:49 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 30 due to node 2 being disconnected (elapsed time since creation: 4ms, elapsed time since send: 4ms, request timeout: 3600000ms)
2024-04-02 14:14:49 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:49 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 23 due to node 3 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 60000ms)
2024-04-02 14:14:49 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:49 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 31 due to node 1 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:49 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:49 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 32 due to node 3 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:49 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum Lorem  ipsum Lorem  Lorem  sit ipsum Microservices sit Lorem  ipsum sit ipsum
2024-04-02 14:14:49 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2532532602455467139, "id": 8990101819690393286, "text": "ipsum Lorem  ipsum Lorem  Lorem  sit ipsum Microservices sit Lorem  ipsum sit ipsum", "createdAt": 1712081689000}' to topic='twitter-topic'
2024-04-02 14:14:49 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:49 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:49 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 24 due to node 1 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 60000ms)
2024-04-02 14:14:49 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:49 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 25 due to node 2 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 60000ms)
2024-04-02 14:14:49 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:49 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 33 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:50 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:50 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 34 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:50 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:50 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 26 due to node 3 being disconnected (elapsed time since creation: 1ms, elapsed time since send: 1ms, request timeout: 60000ms)
2024-04-02 14:14:50 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor ipsum ipsum amet, Lorem  Spring sit Lorem  dolor dolor
2024-04-02 14:14:50 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5979535610989655984, "id": 5158529942076827822, "text": "sit dolor ipsum ipsum amet, Lorem  Spring sit Lorem  dolor dolor", "createdAt": 1712081690000}' to topic='twitter-topic'
2024-04-02 14:14:50 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:50 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:50 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 35 due to node 3 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:50 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:50 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 27 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:50 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:50 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 28 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:51 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:51 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 36 due to node 2 being disconnected (elapsed time since creation: 5ms, elapsed time since send: 5ms, request timeout: 3600000ms)
2024-04-02 14:14:51 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:51 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 37 due to node 1 being disconnected (elapsed time since creation: 5ms, elapsed time since send: 5ms, request timeout: 3600000ms)
2024-04-02 14:14:51 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:51 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 29 due to node 3 being disconnected (elapsed time since creation: 5ms, elapsed time since send: 5ms, request timeout: 60000ms)
2024-04-02 14:14:51 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:51 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 38 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:51 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  dolor dolor Spring dolor sit
2024-04-02 14:14:51 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 776419233884430656, "id": 1797205082464645873, "text": "dolor Lorem  dolor dolor Spring dolor sit", "createdAt": 1712081691000}' to topic='twitter-topic'
2024-04-02 14:14:51 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:51 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:51 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 30 due to node 2 being disconnected (elapsed time since creation: 11ms, elapsed time since send: 11ms, request timeout: 60000ms)
2024-04-02 14:14:51 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:51 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 31 due to node 1 being disconnected (elapsed time since creation: 14ms, elapsed time since send: 14ms, request timeout: 60000ms)
2024-04-02 14:14:51 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:51 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 39 due to node 2 being disconnected (elapsed time since creation: 8ms, elapsed time since send: 8ms, request timeout: 3600000ms)
2024-04-02 14:14:52 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:52 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 40 due to node 1 being disconnected (elapsed time since creation: 10ms, elapsed time since send: 10ms, request timeout: 3600000ms)
2024-04-02 14:14:52 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, amet, dolor Kafka ipsum ipsum
2024-04-02 14:14:52 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4085745967297115680, "id": 8359141824874011825, "text": "amet, amet, dolor Kafka ipsum ipsum", "createdAt": 1712081692000}' to topic='twitter-topic'
2024-04-02 14:14:52 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:52 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:52 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 32 due to node 3 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 60000ms)
2024-04-02 14:14:52 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:52 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 41 due to node 3 being disconnected (elapsed time since creation: 7ms, elapsed time since send: 7ms, request timeout: 3600000ms)
2024-04-02 14:14:52 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:52 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 33 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:52 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:52 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 34 due to node 2 being disconnected (elapsed time since creation: 5ms, elapsed time since send: 5ms, request timeout: 60000ms)
2024-04-02 14:14:53 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:53 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 42 due to node 2 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:53 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:53 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 43 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:53 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor dolor Lorem  sit ipsum amet, Spring amet, sit amet, dolor amet, ipsum
2024-04-02 14:14:53 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4475495196966236931, "id": 6202120738270476118, "text": "amet, dolor dolor Lorem  sit ipsum amet, Spring amet, sit amet, dolor amet, ipsum", "createdAt": 1712081693000}' to topic='twitter-topic'
2024-04-02 14:14:53 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:53 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:53 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 35 due to node 3 being disconnected (elapsed time since creation: 35ms, elapsed time since send: 35ms, request timeout: 60000ms)
2024-04-02 14:14:53 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:53 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 36 due to node 1 being disconnected (elapsed time since creation: 12ms, elapsed time since send: 12ms, request timeout: 60000ms)
2024-04-02 14:14:53 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:53 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 44 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:53 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:53 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 45 due to node 2 being disconnected (elapsed time since creation: 1ms, elapsed time since send: 1ms, request timeout: 3600000ms)
2024-04-02 14:14:54 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:54 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 46 due to node 1 being disconnected (elapsed time since creation: 11ms, elapsed time since send: 11ms, request timeout: 3600000ms)
2024-04-02 14:14:54 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:54 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 37 due to node 2 being disconnected (elapsed time since creation: 5ms, elapsed time since send: 5ms, request timeout: 60000ms)
2024-04-02 14:14:54 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum sit dolor ipsum amet, ipsum Java dolor ipsum Lorem  ipsum
2024-04-02 14:14:54 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4101444010092918022, "id": 3921269660226538015, "text": "ipsum sit dolor ipsum amet, ipsum Java dolor ipsum Lorem  ipsum", "createdAt": 1712081694000}' to topic='twitter-topic'
2024-04-02 14:14:54 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:54 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:54 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 38 due to node 3 being disconnected (elapsed time since creation: 4ms, elapsed time since send: 4ms, request timeout: 60000ms)
2024-04-02 14:14:54 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:54 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 47 due to node 3 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:54 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:54 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 39 due to node 1 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 60000ms)
2024-04-02 14:14:54 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:54 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 48 due to node 2 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:55 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:55 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 49 due to node 1 being disconnected (elapsed time since creation: 1ms, elapsed time since send: 1ms, request timeout: 3600000ms)
2024-04-02 14:14:55 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:55 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 40 due to node 2 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 60000ms)
2024-04-02 14:14:55 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum Lorem  Java dolor amet,
2024-04-02 14:14:55 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6233446278045984740, "id": 4766718766786219836, "text": "dolor ipsum Lorem  Java dolor amet,", "createdAt": 1712081695000}' to topic='twitter-topic'
2024-04-02 14:14:55 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:55 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:55 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 50 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:55 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:55 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 51 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:55 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:55 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 41 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:56 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:56 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 52 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:56 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:56 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 42 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:56 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:56 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 43 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:56 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor dolor dolor Lorem  sit ipsum amet, Microservices ipsum amet, amet, amet, amet, ipsum Lorem
2024-04-02 14:14:56 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7998040012234362111, "id": 7805912920583746153, "text": "sit dolor dolor dolor Lorem  sit ipsum amet, Microservices ipsum amet, amet, amet, amet, ipsum Lorem", "createdAt": 1712081696000}' to topic='twitter-topic'
2024-04-02 14:14:56 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:56 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:56 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 53 due to node 3 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:56 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:56 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 54 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:56 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:56 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 55 due to node 1 being disconnected (elapsed time since creation: 1ms, elapsed time since send: 1ms, request timeout: 3600000ms)
2024-04-02 14:14:57 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:57 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 44 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:57 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 1 disconnected.
2024-04-02 14:14:57 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 45 due to node 1 being disconnected (elapsed time since creation: 1ms, elapsed time since send: 1ms, request timeout: 60000ms)
2024-04-02 14:14:57 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 2 disconnected.
2024-04-02 14:14:57 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 46 due to node 2 being disconnected (elapsed time since creation: 1ms, elapsed time since send: 1ms, request timeout: 60000ms)
2024-04-02 14:14:57 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit ipsum Lorem  sit amet, amet, dolor Java Lorem  amet, Lorem  Lorem  sit sit
2024-04-02 14:14:57 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2231380475200886457, "id": 1535619917661148927, "text": "dolor sit ipsum Lorem  sit amet, amet, dolor Java Lorem  amet, Lorem  Lorem  sit sit", "createdAt": 1712081697000}' to topic='twitter-topic'
2024-04-02 14:14:57 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:57 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 3 disconnected.
2024-04-02 14:14:57 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 56 due to node 3 being disconnected (elapsed time since creation: 3ms, elapsed time since send: 3ms, request timeout: 3600000ms)
2024-04-02 14:14:57 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 1 disconnected.
2024-04-02 14:14:57 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 57 due to node 1 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:57 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node 2 disconnected.
2024-04-02 14:14:57 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Cancelled in-flight API_VERSIONS request with correlation id 58 due to node 2 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 3600000ms)
2024-04-02 14:14:58 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Node 3 disconnected.
2024-04-02 14:14:58 [kafka-producer-network-thread | producer-1] INFO  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Cancelled in-flight API_VERSIONS request with correlation id 47 due to node 3 being disconnected (elapsed time since creation: 2ms, elapsed time since send: 2ms, request timeout: 60000ms)
2024-04-02 14:14:58 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor dolor ipsum Java sit Lorem
2024-04-02 14:14:58 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5849926963993698655, "id": 8496653098161813974, "text": "sit dolor dolor ipsum Java sit Lorem", "createdAt": 1712081698000}' to topic='twitter-topic'
2024-04-02 14:14:58 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 50 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:14:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 51 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:14:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 52 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:14:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 53 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:14:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 54 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:14:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 55 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:14:59 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum Lorem  dolor amet, Java dolor dolor Lorem
2024-04-02 14:14:59 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2993929099103429264, "id": 6549493777143564169, "text": "ipsum Lorem  dolor amet, Java dolor dolor Lorem", "createdAt": 1712081699000}' to topic='twitter-topic'
2024-04-02 14:14:59 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:14:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 56 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:14:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 57 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:14:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 58 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 59 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 60 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 61 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 62 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 63 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:00 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor amet, amet, Lorem  ipsum ipsum Spring ipsum amet, dolor ipsum dolor dolor
2024-04-02 14:15:00 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8619366233186562074, "id": 5080528342848856265, "text": "sit dolor amet, amet, Lorem  ipsum ipsum Spring ipsum amet, dolor ipsum dolor dolor", "createdAt": 1712081700000}' to topic='twitter-topic'
2024-04-02 14:15:00 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 64 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 65 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 66 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 67 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 68 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] Error while fetching metadata with correlation id 69 : {twitter-topic=LEADER_NOT_AVAILABLE}
2024-04-02 14:15:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:01 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum sit ipsum amet, ipsum sit Elasticsearch amet, dolor amet, sit
2024-04-02 14:15:01 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4002325375071643803, "id": 2703526960041776840, "text": "ipsum sit ipsum amet, ipsum sit Elasticsearch amet, dolor amet, sit", "createdAt": 1712081701000}' to topic='twitter-topic'
2024-04-02 14:15:01 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:02 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit amet, Lorem  amet, Lorem  sit Lorem  Lorem  Elasticsearch ipsum sit ipsum ipsum ipsum ipsum ipsum
2024-04-02 14:15:02 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 740775034680282087, "id": 8936816025172196173, "text": "sit amet, Lorem  amet, Lorem  sit Lorem  Lorem  Elasticsearch ipsum sit ipsum ipsum ipsum ipsum ipsum", "createdAt": 1712081702000}' to topic='twitter-topic'
2024-04-02 14:15:02 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:03 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor Lorem  ipsum ipsum amet, Microservices ipsum Lorem  dolor dolor
2024-04-02 14:15:03 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8796095373908134745, "id": 9147692915933383118, "text": "sit dolor Lorem  ipsum ipsum amet, Microservices ipsum Lorem  dolor dolor", "createdAt": 1712081703000}' to topic='twitter-topic'
2024-04-02 14:15:03 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:04 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum Lorem  sit sit dolor amet, sit Lorem  Spring amet, ipsum amet, Lorem  Lorem  Lorem
2024-04-02 14:15:04 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 626871199533447758, "id": 5607475869317072112, "text": "ipsum Lorem  sit sit dolor amet, sit Lorem  Spring amet, ipsum amet, Lorem  Lorem  Lorem", "createdAt": 1712081704000}' to topic='twitter-topic'
2024-04-02 14:15:04 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:05 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, Lorem  dolor dolor sit ipsum Microservices sit amet, Lorem  ipsum
2024-04-02 14:15:05 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1601131886900865095, "id": 4473061458789325025, "text": "amet, Lorem  dolor dolor sit ipsum Microservices sit amet, Lorem  ipsum", "createdAt": 1712081705000}' to topic='twitter-topic'
2024-04-02 14:15:05 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:06 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum Lorem  amet, dolor ipsum Kafka ipsum dolor ipsum
2024-04-02 14:15:06 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8395853032862992913, "id": 1438565331383103501, "text": "ipsum Lorem  amet, dolor ipsum Kafka ipsum dolor ipsum", "createdAt": 1712081706000}' to topic='twitter-topic'
2024-04-02 14:15:06 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:07 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor sit amet, sit Lorem  Elasticsearch Lorem  sit amet, Lorem  dolor
2024-04-02 14:15:07 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3094596507512021230, "id": 3433374540502873916, "text": "sit dolor sit amet, sit Lorem  Elasticsearch Lorem  sit amet, Lorem  dolor", "createdAt": 1712081707000}' to topic='twitter-topic'
2024-04-02 14:15:07 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:08 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum amet, dolor Lorem  dolor ipsum dolor Lorem  Java sit dolor sit ipsum dolor dolor sit
2024-04-02 14:15:08 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1009536386020147735, "id": 3996133124577227428, "text": "ipsum amet, dolor Lorem  dolor ipsum dolor Lorem  Java sit dolor sit ipsum dolor dolor sit", "createdAt": 1712081708000}' to topic='twitter-topic'
2024-04-02 14:15:08 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:09 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum amet, ipsum dolor dolor Lorem  sit Spring Lorem  ipsum sit dolor Lorem  sit ipsum
2024-04-02 14:15:09 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3940411849592947708, "id": 8669376915157362860, "text": "dolor ipsum amet, ipsum dolor dolor Lorem  sit Spring Lorem  ipsum sit dolor Lorem  sit ipsum", "createdAt": 1712081709000}' to topic='twitter-topic'
2024-04-02 14:15:09 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:10 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor amet, Lorem  dolor Lorem  Spring amet, amet, ipsum ipsum
2024-04-02 14:15:10 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7181934102178390751, "id": 7134276558250061030, "text": "dolor amet, Lorem  dolor Lorem  Spring amet, amet, ipsum ipsum", "createdAt": 1712081710000}' to topic='twitter-topic'
2024-04-02 14:15:10 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:11 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit sit Microservices Lorem  dolor
2024-04-02 14:15:11 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2486571659554467730, "id": 8034652554257124910, "text": "dolor sit sit Microservices Lorem  dolor", "createdAt": 1712081711000}' to topic='twitter-topic'
2024-04-02 14:15:11 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:12 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit ipsum amet, Microservices Lorem  ipsum
2024-04-02 14:15:12 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7656854353603912892, "id": 4706012525839508450, "text": "sit sit ipsum amet, Microservices Lorem  ipsum", "createdAt": 1712081712000}' to topic='twitter-topic'
2024-04-02 14:15:12 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:13 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor Lorem  sit sit ipsum dolor Kafka Lorem  ipsum amet, ipsum amet,
2024-04-02 14:15:13 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6033178076508389704, "id": 6120463434490282984, "text": "sit dolor Lorem  sit sit ipsum dolor Kafka Lorem  ipsum amet, ipsum amet,", "createdAt": 1712081713000}' to topic='twitter-topic'
2024-04-02 14:15:13 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:14 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit ipsum amet, Spring Lorem  ipsum sit
2024-04-02 14:15:14 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8721174342704956531, "id": 7349008262965204578, "text": "sit sit ipsum amet, Spring Lorem  ipsum sit", "createdAt": 1712081714000}' to topic='twitter-topic'
2024-04-02 14:15:14 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:15 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum ipsum dolor Microservices Lorem  amet,
2024-04-02 14:15:15 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7288870932791355399, "id": 1313906683513156381, "text": "ipsum ipsum dolor Microservices Lorem  amet,", "createdAt": 1712081715000}' to topic='twitter-topic'
2024-04-02 14:15:15 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:16 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  dolor dolor dolor Lorem  dolor amet, Java amet, sit amet, ipsum amet,
2024-04-02 14:15:16 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4503948330570255399, "id": 2710449013493353750, "text": "Lorem  dolor dolor dolor Lorem  dolor amet, Java amet, sit amet, ipsum amet,", "createdAt": 1712081716000}' to topic='twitter-topic'
2024-04-02 14:15:16 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:17 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor dolor Elasticsearch ipsum amet,
2024-04-02 14:15:17 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4426112925768741341, "id": 1771661584774655542, "text": "amet, dolor dolor Elasticsearch ipsum amet,", "createdAt": 1712081717000}' to topic='twitter-topic'
2024-04-02 14:15:17 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:18 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum Lorem  Kafka amet, sit
2024-04-02 14:15:18 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1726915051371196587, "id": 6872784462629180075, "text": "sit ipsum Lorem  Kafka amet, sit", "createdAt": 1712081718000}' to topic='twitter-topic'
2024-04-02 14:15:18 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:19 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum ipsum dolor amet, dolor Java ipsum ipsum amet, sit
2024-04-02 14:15:19 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5920626601128871137, "id": 2189585451932504049, "text": "ipsum ipsum dolor amet, dolor Java ipsum ipsum amet, sit", "createdAt": 1712081719000}' to topic='twitter-topic'
2024-04-02 14:15:19 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:20 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum sit ipsum amet, dolor Lorem  Lorem  Spring ipsum sit amet, Lorem  dolor sit
2024-04-02 14:15:20 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8389555604862742183, "id": 2011791088461218720, "text": "dolor ipsum sit ipsum amet, dolor Lorem  Lorem  Spring ipsum sit amet, Lorem  dolor sit", "createdAt": 1712081720000}' to topic='twitter-topic'
2024-04-02 14:15:20 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:21 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor amet, sit dolor dolor sit ipsum Java ipsum ipsum sit dolor Lorem  Lorem  ipsum
2024-04-02 14:15:21 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2885439982631708208, "id": 3451506909076617854, "text": "sit dolor amet, sit dolor dolor sit ipsum Java ipsum ipsum sit dolor Lorem  Lorem  ipsum", "createdAt": 1712081721000}' to topic='twitter-topic'
2024-04-02 14:15:21 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:22 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  dolor ipsum amet, dolor Spring amet, dolor Lorem
2024-04-02 14:15:22 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2272175781394306323, "id": 1024244304411743748, "text": "Lorem  dolor ipsum amet, dolor Spring amet, dolor Lorem", "createdAt": 1712081722000}' to topic='twitter-topic'
2024-04-02 14:15:22 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:23 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit amet, amet, ipsum Lorem  ipsum dolor Microservices sit ipsum dolor dolor sit sit
2024-04-02 14:15:23 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1940467534422766918, "id": 2981806618330088170, "text": "sit sit amet, amet, ipsum Lorem  ipsum dolor Microservices sit ipsum dolor dolor sit sit", "createdAt": 1712081723000}' to topic='twitter-topic'
2024-04-02 14:15:23 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:24 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor ipsum ipsum sit sit Spring ipsum Lorem  Lorem  amet,
2024-04-02 14:15:24 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7794727210906501070, "id": 1611521541850635791, "text": "ipsum dolor ipsum ipsum sit sit Spring ipsum Lorem  Lorem  amet,", "createdAt": 1712081724000}' to topic='twitter-topic'
2024-04-02 14:15:24 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:25 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum amet, dolor sit amet, Lorem  Spring dolor dolor amet, amet, amet,
2024-04-02 14:15:25 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6841560080462921315, "id": 7243060017107717809, "text": "ipsum amet, dolor sit amet, Lorem  Spring dolor dolor amet, amet, amet,", "createdAt": 1712081725000}' to topic='twitter-topic'
2024-04-02 14:15:25 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:26 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor dolor ipsum sit Lorem  Elasticsearch dolor sit ipsum ipsum
2024-04-02 14:15:26 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6564685907675474028, "id": 8321761600416288569, "text": "dolor dolor ipsum sit Lorem  Elasticsearch dolor sit ipsum ipsum", "createdAt": 1712081726000}' to topic='twitter-topic'
2024-04-02 14:15:26 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:27 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit ipsum sit sit dolor ipsum Spring sit ipsum ipsum ipsum dolor ipsum
2024-04-02 14:15:27 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1721432154089951621, "id": 7213704755781257926, "text": "amet, sit ipsum sit sit dolor ipsum Spring sit ipsum ipsum ipsum dolor ipsum", "createdAt": 1712081727000}' to topic='twitter-topic'
2024-04-02 14:15:27 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:28 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit Lorem  ipsum ipsum ipsum dolor Java ipsum amet, sit ipsum amet, amet,
2024-04-02 14:15:28 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1770631601489864094, "id": 5253467462954039104, "text": "sit sit Lorem  ipsum ipsum ipsum dolor Java ipsum amet, sit ipsum amet, amet,", "createdAt": 1712081728000}' to topic='twitter-topic'
2024-04-02 14:15:28 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:29 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit sit Spring Lorem  Lorem
2024-04-02 14:15:29 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4893785551023373766, "id": 1625990469671105930, "text": "sit sit sit Spring Lorem  Lorem", "createdAt": 1712081729000}' to topic='twitter-topic'
2024-04-02 14:15:29 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:30 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum dolor Microservices amet, ipsum
2024-04-02 14:15:30 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8259189915923688327, "id": 3145692845467143010, "text": "dolor ipsum dolor Microservices amet, ipsum", "createdAt": 1712081730000}' to topic='twitter-topic'
2024-04-02 14:15:30 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:30 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:31 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor sit ipsum ipsum Lorem  amet, Lorem  Java sit ipsum dolor Lorem  Lorem  amet,
2024-04-02 14:15:31 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5158532700415485257, "id": 7500308074757264559, "text": "ipsum dolor sit ipsum ipsum Lorem  amet, Lorem  Java sit ipsum dolor Lorem  Lorem  amet,", "createdAt": 1712081731000}' to topic='twitter-topic'
2024-04-02 14:15:31 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:31 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:32 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor sit amet, dolor ipsum Elasticsearch dolor dolor sit amet, amet,
2024-04-02 14:15:32 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2049147614776593756, "id": 5734858785431916829, "text": "amet, dolor sit amet, dolor ipsum Elasticsearch dolor dolor sit amet, amet,", "createdAt": 1712081732000}' to topic='twitter-topic'
2024-04-02 14:15:32 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:32 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:33 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, amet, ipsum ipsum dolor Lorem  sit Java amet, dolor Lorem  amet, dolor sit
2024-04-02 14:15:33 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5406634196785305318, "id": 7526050046320156658, "text": "amet, amet, ipsum ipsum dolor Lorem  sit Java amet, dolor Lorem  amet, dolor sit", "createdAt": 1712081733000}' to topic='twitter-topic'
2024-04-02 14:15:33 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:33 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:34 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum amet, ipsum dolor sit ipsum ipsum Microservices dolor ipsum ipsum dolor amet,
2024-04-02 14:15:34 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4705694516387728567, "id": 7437082917819086654, "text": "ipsum amet, ipsum dolor sit ipsum ipsum Microservices dolor ipsum ipsum dolor amet,", "createdAt": 1712081734000}' to topic='twitter-topic'
2024-04-02 14:15:34 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:34 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:35 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum Lorem  Lorem  Lorem  amet, sit Lorem  Elasticsearch ipsum ipsum ipsum sit dolor
2024-04-02 14:15:35 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 23678322416537872, "id": 84402881736105542, "text": "ipsum Lorem  Lorem  Lorem  amet, sit Lorem  Elasticsearch ipsum ipsum ipsum sit dolor", "createdAt": 1712081735000}' to topic='twitter-topic'
2024-04-02 14:15:35 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:35 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:36 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit Lorem  sit ipsum ipsum dolor Microservices sit Lorem  ipsum amet, Lorem
2024-04-02 14:15:36 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5438056935623896099, "id": 3726572123266571891, "text": "dolor sit Lorem  sit ipsum ipsum dolor Microservices sit Lorem  ipsum amet, Lorem", "createdAt": 1712081736000}' to topic='twitter-topic'
2024-04-02 14:15:36 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:36 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:37 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, ipsum Lorem  dolor amet, Lorem  Kafka Lorem  sit sit sit Lorem
2024-04-02 14:15:37 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7818639083843100232, "id": 6792815611747012080, "text": "amet, ipsum Lorem  dolor amet, Lorem  Kafka Lorem  sit sit sit Lorem", "createdAt": 1712081737000}' to topic='twitter-topic'
2024-04-02 14:15:37 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:37 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:38 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:38 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  ipsum Lorem  Lorem  dolor Lorem  Lorem  Elasticsearch ipsum dolor Lorem  sit dolor sit Lorem
2024-04-02 14:15:38 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4046813718663071598, "id": 1518094551258255122, "text": "dolor Lorem  ipsum Lorem  Lorem  dolor Lorem  Lorem  Elasticsearch ipsum dolor Lorem  sit dolor sit Lorem", "createdAt": 1712081738000}' to topic='twitter-topic'
2024-04-02 14:15:38 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:39 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:39 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum Lorem  ipsum amet, ipsum Lorem  Microservices amet, sit amet, Lorem  amet,
2024-04-02 14:15:39 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7720575397030529746, "id": 2669213607505582261, "text": "Lorem  ipsum Lorem  ipsum amet, ipsum Lorem  Microservices amet, sit amet, Lorem  amet,", "createdAt": 1712081739000}' to topic='twitter-topic'
2024-04-02 14:15:39 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:40 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:40 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  amet, Lorem  sit Microservices ipsum ipsum sit
2024-04-02 14:15:40 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7102527730426060389, "id": 2873782448675155689, "text": "Lorem  amet, Lorem  sit Microservices ipsum ipsum sit", "createdAt": 1712081740000}' to topic='twitter-topic'
2024-04-02 14:15:40 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:41 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor amet, Lorem  amet, Lorem  dolor amet, Kafka amet, sit amet, sit ipsum Lorem
2024-04-02 14:15:41 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3584477621475541682, "id": 3312382519491268719, "text": "sit dolor amet, Lorem  amet, Lorem  dolor amet, Kafka amet, sit amet, sit ipsum Lorem", "createdAt": 1712081741000}' to topic='twitter-topic'
2024-04-02 14:15:41 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:41 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:42 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:43 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit dolor dolor ipsum dolor dolor Kafka ipsum Lorem  Lorem  sit dolor amet,
2024-04-02 14:15:43 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2097152214718845733, "id": 5286856100318221680, "text": "Lorem  sit dolor dolor ipsum dolor dolor Kafka ipsum Lorem  Lorem  sit dolor amet,", "createdAt": 1712081743000}' to topic='twitter-topic'
2024-04-02 14:15:43 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:43 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:44 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit sit Lorem  ipsum ipsum Java Lorem  ipsum ipsum sit
2024-04-02 14:15:44 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7189842547891814227, "id": 1195793054897644969, "text": "dolor sit sit Lorem  ipsum ipsum Java Lorem  ipsum ipsum sit", "createdAt": 1712081744000}' to topic='twitter-topic'
2024-04-02 14:15:44 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:44 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:45 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor amet, amet, ipsum Lorem  Java dolor sit sit amet,
2024-04-02 14:15:45 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6646809983346455387, "id": 1953829480776137098, "text": "dolor amet, amet, ipsum Lorem  Java dolor sit sit amet,", "createdAt": 1712081745000}' to topic='twitter-topic'
2024-04-02 14:15:45 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:45 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:46 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor ipsum dolor sit Spring ipsum ipsum ipsum ipsum
2024-04-02 14:15:46 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7202768564399241486, "id": 75158516898247949, "text": "ipsum dolor ipsum dolor sit Spring ipsum ipsum ipsum ipsum", "createdAt": 1712081746000}' to topic='twitter-topic'
2024-04-02 14:15:46 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:46 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:46 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:46 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:46 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:46 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:46 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:46 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:46 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:46 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:47 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor dolor sit sit amet, Java dolor amet, Lorem  sit
2024-04-02 14:15:47 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 175656737240630355, "id": 4756788346828757670, "text": "dolor dolor sit sit amet, Java dolor amet, Lorem  sit", "createdAt": 1712081747000}' to topic='twitter-topic'
2024-04-02 14:15:47 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:47 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:47 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:47 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:47 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:47 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:47 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:47 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:47 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:47 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:48 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  Lorem  dolor dolor sit ipsum Microservices amet, dolor sit sit amet,
2024-04-02 14:15:48 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5842050854611684051, "id": 8084763871216021842, "text": "Lorem  Lorem  dolor dolor sit ipsum Microservices amet, dolor sit sit amet,", "createdAt": 1712081748000}' to topic='twitter-topic'
2024-04-02 14:15:48 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:48 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:48 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:48 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:48 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:48 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:48 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:48 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:48 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:48 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:49 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:49 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor ipsum dolor ipsum Lorem  ipsum Kafka amet, amet, sit amet, sit ipsum
2024-04-02 14:15:49 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7405236576012481635, "id": 678404298170411608, "text": "ipsum dolor ipsum dolor ipsum Lorem  ipsum Kafka amet, amet, sit amet, sit ipsum", "createdAt": 1712081749000}' to topic='twitter-topic'
2024-04-02 14:15:49 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:49 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:49 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:49 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:49 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:49 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:49 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:49 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:49 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:50 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:50 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor sit dolor ipsum dolor dolor ipsum Spring sit ipsum amet, Lorem  Lorem  Lorem
2024-04-02 14:15:50 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4330238030080486876, "id": 4339780327193573909, "text": "sit dolor sit dolor ipsum dolor dolor ipsum Spring sit ipsum amet, Lorem  Lorem  Lorem", "createdAt": 1712081750000}' to topic='twitter-topic'
2024-04-02 14:15:50 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:50 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:50 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:50 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:50 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:50 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:50 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:50 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:50 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:51 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:51 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum Lorem  Lorem  sit dolor Lorem  Lorem  Spring sit ipsum Lorem  ipsum ipsum
2024-04-02 14:15:51 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6868026583574729760, "id": 8602847396525083643, "text": "ipsum Lorem  Lorem  sit dolor Lorem  Lorem  Spring sit ipsum Lorem  ipsum ipsum", "createdAt": 1712081751000}' to topic='twitter-topic'
2024-04-02 14:15:51 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:51 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:51 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:51 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:51 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:51 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:51 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:51 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:51 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:51 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:52 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  Lorem  amet, dolor dolor Elasticsearch Lorem  sit ipsum sit
2024-04-02 14:15:52 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2580715303131877262, "id": 9071858946059121926, "text": "dolor Lorem  Lorem  amet, dolor dolor Elasticsearch Lorem  sit ipsum sit", "createdAt": 1712081752000}' to topic='twitter-topic'
2024-04-02 14:15:52 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:52 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:52 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:52 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:52 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:52 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:52 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:52 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:52 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:52 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:53 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:53 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor dolor ipsum amet, dolor sit Spring sit Lorem  amet, dolor dolor amet,
2024-04-02 14:15:53 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4833117320274924453, "id": 717715621249654072, "text": "ipsum dolor dolor ipsum amet, dolor sit Spring sit Lorem  amet, dolor dolor amet,", "createdAt": 1712081753000}' to topic='twitter-topic'
2024-04-02 14:15:53 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:53 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:53 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:53 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:53 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:53 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:53 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:53 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:53 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:54 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:54 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit dolor sit Kafka amet, dolor sit
2024-04-02 14:15:54 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3265345159915370564, "id": 3951519221921621525, "text": "dolor sit dolor sit Kafka amet, dolor sit", "createdAt": 1712081754000}' to topic='twitter-topic'
2024-04-02 14:15:54 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:54 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:54 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:54 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:54 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:54 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:54 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:54 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:54 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:55 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:55 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  Lorem  Lorem  sit dolor Elasticsearch sit amet, sit
2024-04-02 14:15:55 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7960636085211086406, "id": 4161702935728873191, "text": "Lorem  Lorem  Lorem  sit dolor Elasticsearch sit amet, sit", "createdAt": 1712081755000}' to topic='twitter-topic'
2024-04-02 14:15:55 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:55 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:55 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:55 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:55 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:55 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:55 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:55 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:55 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:56 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:56 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:56 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  amet, sit amet, dolor Java sit sit dolor dolor
2024-04-02 14:15:56 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1074299814606649245, "id": 2124135930880495063, "text": "Lorem  amet, sit amet, dolor Java sit sit dolor dolor", "createdAt": 1712081756000}' to topic='twitter-topic'
2024-04-02 14:15:56 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:56 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:56 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:56 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:56 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:56 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:56 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:56 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:57 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:57 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:57 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  amet, sit sit ipsum ipsum Java ipsum dolor ipsum sit Lorem  amet,
2024-04-02 14:15:57 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 739294489010456890, "id": 515436151450644417, "text": "dolor Lorem  amet, sit sit ipsum ipsum Java ipsum dolor ipsum sit Lorem  amet,", "createdAt": 1712081757000}' to topic='twitter-topic'
2024-04-02 14:15:57 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:57 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:57 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:57 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:57 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:57 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:57 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:57 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:58 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  Lorem  sit dolor sit dolor Java dolor ipsum dolor amet, ipsum
2024-04-02 14:15:58 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1897366392740309054, "id": 8684306779198746662, "text": "Lorem  Lorem  sit dolor sit dolor Java dolor ipsum dolor amet, ipsum", "createdAt": 1712081758000}' to topic='twitter-topic'
2024-04-02 14:15:58 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:58 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:59 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  amet, Lorem  dolor dolor dolor sit Java amet, sit sit ipsum dolor Lorem
2024-04-02 14:15:59 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5104620380431410587, "id": 2705783777238189300, "text": "Lorem  amet, Lorem  dolor dolor dolor sit Java amet, sit sit ipsum dolor Lorem", "createdAt": 1712081759000}' to topic='twitter-topic'
2024-04-02 14:15:59 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:15:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:15:59 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:00 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit sit amet, dolor ipsum Lorem  ipsum Kafka sit ipsum Lorem  ipsum amet, Lorem
2024-04-02 14:16:00 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8194730304224619527, "id": 2701078642223184685, "text": "Lorem  sit sit amet, dolor ipsum Lorem  ipsum Kafka sit ipsum Lorem  ipsum amet, Lorem", "createdAt": 1712081760000}' to topic='twitter-topic'
2024-04-02 14:16:00 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:00 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:01 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor amet, ipsum Lorem  dolor Elasticsearch amet, sit Lorem  sit
2024-04-02 14:16:01 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5104209027689143596, "id": 4351568786039137387, "text": "dolor amet, ipsum Lorem  dolor Elasticsearch amet, sit Lorem  sit", "createdAt": 1712081761000}' to topic='twitter-topic'
2024-04-02 14:16:01 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:01 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:02 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  amet, Lorem  Lorem  Microservices Lorem  dolor dolor
2024-04-02 14:16:02 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2894031180327366038, "id": 1138912649303103201, "text": "sit Lorem  amet, Lorem  Lorem  Microservices Lorem  dolor dolor", "createdAt": 1712081762000}' to topic='twitter-topic'
2024-04-02 14:16:02 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:02 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:03 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum dolor dolor dolor ipsum amet, Spring amet, dolor amet, dolor ipsum
2024-04-02 14:16:03 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4027211044158409372, "id": 3281823107694942165, "text": "sit ipsum dolor dolor dolor ipsum amet, Spring amet, dolor amet, dolor ipsum", "createdAt": 1712081763000}' to topic='twitter-topic'
2024-04-02 14:16:03 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:03 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:04 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, amet, ipsum Microservices dolor amet,
2024-04-02 14:16:04 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8112887568665629447, "id": 3763240610012221669, "text": "amet, amet, ipsum Microservices dolor amet,", "createdAt": 1712081764000}' to topic='twitter-topic'
2024-04-02 14:16:04 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:04 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:05 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum sit dolor Lorem  amet, Microservices ipsum amet, Lorem  ipsum sit
2024-04-02 14:16:05 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2106590384839861897, "id": 5379363793582505071, "text": "dolor ipsum sit dolor Lorem  amet, Microservices ipsum amet, Lorem  ipsum sit", "createdAt": 1712081765000}' to topic='twitter-topic'
2024-04-02 14:16:05 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:05 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:06 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor amet, ipsum Spring amet, Lorem
2024-04-02 14:16:06 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 91853089861265195, "id": 4748938349381034492, "text": "dolor amet, ipsum Spring amet, Lorem", "createdAt": 1712081766000}' to topic='twitter-topic'
2024-04-02 14:16:06 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:06 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:07 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, ipsum amet, sit Lorem  ipsum Lorem  Lorem  Spring amet, Lorem  amet, amet, amet, Lorem
2024-04-02 14:16:07 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5091626530505437956, "id": 9185915376275882541, "text": "amet, ipsum amet, sit Lorem  ipsum Lorem  Lorem  Spring amet, Lorem  amet, amet, amet, Lorem", "createdAt": 1712081767000}' to topic='twitter-topic'
2024-04-02 14:16:07 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:07 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:08 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor dolor Lorem  amet, Lorem  dolor dolor Spring ipsum dolor amet, sit ipsum dolor
2024-04-02 14:16:08 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2454417513057868182, "id": 7849866309168927582, "text": "dolor dolor Lorem  amet, Lorem  dolor dolor Spring ipsum dolor amet, sit ipsum dolor", "createdAt": 1712081768000}' to topic='twitter-topic'
2024-04-02 14:16:08 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:08 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:09 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum Lorem  amet, dolor Java Lorem  sit
2024-04-02 14:16:09 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 9140117531870120757, "id": 4750502202332192628, "text": "ipsum Lorem  amet, dolor Java Lorem  sit", "createdAt": 1712081769000}' to topic='twitter-topic'
2024-04-02 14:16:09 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:09 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:10 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum amet, sit sit Elasticsearch ipsum sit Lorem
2024-04-02 14:16:10 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4884229762315316073, "id": 7109149431419570286, "text": "Lorem  ipsum amet, sit sit Elasticsearch ipsum sit Lorem", "createdAt": 1712081770000}' to topic='twitter-topic'
2024-04-02 14:16:10 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:10 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:11 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  amet, sit amet, ipsum amet, ipsum Microservices sit Lorem  ipsum amet, Lorem
2024-04-02 14:16:11 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4389916610554355113, "id": 5333996517497901761, "text": "Lorem  amet, sit amet, ipsum amet, ipsum Microservices sit Lorem  ipsum amet, Lorem", "createdAt": 1712081771000}' to topic='twitter-topic'
2024-04-02 14:16:11 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:11 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:12 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor ipsum Microservices amet, sit
2024-04-02 14:16:12 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2455238003651518492, "id": 8425293030485879789, "text": "ipsum dolor ipsum Microservices amet, sit", "createdAt": 1712081772000}' to topic='twitter-topic'
2024-04-02 14:16:12 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:12 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:13 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum dolor ipsum sit dolor sit Kafka sit sit sit amet, sit amet,
2024-04-02 14:16:13 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4987716991461327354, "id": 8226903131327880107, "text": "Lorem  ipsum dolor ipsum sit dolor sit Kafka sit sit sit amet, sit amet,", "createdAt": 1712081773000}' to topic='twitter-topic'
2024-04-02 14:16:13 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:13 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:14 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  dolor Elasticsearch amet, sit
2024-04-02 14:16:14 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2988191009943316347, "id": 7116645795715523796, "text": "sit Lorem  dolor Elasticsearch amet, sit", "createdAt": 1712081774000}' to topic='twitter-topic'
2024-04-02 14:16:14 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:14 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:15 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum dolor dolor Lorem  ipsum sit Lorem  Spring dolor sit amet, dolor ipsum amet,
2024-04-02 14:16:15 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5738801804731393127, "id": 5214105320691649514, "text": "Lorem  ipsum dolor dolor Lorem  ipsum sit Lorem  Spring dolor sit amet, dolor ipsum amet,", "createdAt": 1712081775000}' to topic='twitter-topic'
2024-04-02 14:16:15 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:15 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:16 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit amet, amet, Lorem  Lorem  Spring ipsum sit Lorem  sit
2024-04-02 14:16:16 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6436678996362437901, "id": 691582846830994669, "text": "sit sit amet, amet, Lorem  Lorem  Spring ipsum sit Lorem  sit", "createdAt": 1712081776000}' to topic='twitter-topic'
2024-04-02 14:16:16 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:16 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:17 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, amet, Lorem  Java ipsum ipsum
2024-04-02 14:16:17 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4280947433452749468, "id": 8508452722104500073, "text": "amet, amet, Lorem  Java ipsum ipsum", "createdAt": 1712081777000}' to topic='twitter-topic'
2024-04-02 14:16:17 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:17 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:18 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, ipsum amet, sit sit Lorem  Elasticsearch dolor Lorem  ipsum Lorem
2024-04-02 14:16:18 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7738465800517944510, "id": 2050498861752391197, "text": "amet, ipsum amet, sit sit Lorem  Elasticsearch dolor Lorem  ipsum Lorem", "createdAt": 1712081778000}' to topic='twitter-topic'
2024-04-02 14:16:18 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:18 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:19 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor Lorem  dolor Spring ipsum ipsum
2024-04-02 14:16:19 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8517537591901471300, "id": 7774064710915602685, "text": "amet, dolor Lorem  dolor Spring ipsum ipsum", "createdAt": 1712081779000}' to topic='twitter-topic'
2024-04-02 14:16:19 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:19 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:20 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit sit sit Lorem  Lorem  Lorem  Elasticsearch sit dolor dolor ipsum sit dolor
2024-04-02 14:16:20 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8520071730477350068, "id": 798884667608854535, "text": "sit sit sit sit Lorem  Lorem  Lorem  Elasticsearch sit dolor dolor ipsum sit dolor", "createdAt": 1712081780000}' to topic='twitter-topic'
2024-04-02 14:16:20 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:20 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:21 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  amet, ipsum dolor ipsum Elasticsearch dolor sit sit
2024-04-02 14:16:21 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4129714990011678572, "id": 6171062707208828690, "text": "Lorem  amet, ipsum dolor ipsum Elasticsearch dolor sit sit", "createdAt": 1712081781000}' to topic='twitter-topic'
2024-04-02 14:16:21 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:21 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:22 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  dolor Kafka ipsum dolor
2024-04-02 14:16:22 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3087886571142205743, "id": 2245158861417907162, "text": "dolor Lorem  dolor Kafka ipsum dolor", "createdAt": 1712081782000}' to topic='twitter-topic'
2024-04-02 14:16:22 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:22 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:23 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum Lorem  sit amet, Elasticsearch ipsum Lorem  amet,
2024-04-02 14:16:23 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6421078768048103340, "id": 9013608684113440942, "text": "Lorem  ipsum Lorem  sit amet, Elasticsearch ipsum Lorem  amet,", "createdAt": 1712081783000}' to topic='twitter-topic'
2024-04-02 14:16:23 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:23 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:24 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  sit Microservices Lorem  Lorem
2024-04-02 14:16:24 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3244371964531296172, "id": 6535567158395741142, "text": "sit Lorem  sit Microservices Lorem  Lorem", "createdAt": 1712081784000}' to topic='twitter-topic'
2024-04-02 14:16:24 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:24 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:25 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit dolor dolor Lorem  dolor ipsum Kafka ipsum Lorem  amet, ipsum ipsum dolor
2024-04-02 14:16:25 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4205668351360346544, "id": 8872061909671010400, "text": "amet, sit dolor dolor Lorem  dolor ipsum Kafka ipsum Lorem  amet, ipsum ipsum dolor", "createdAt": 1712081785000}' to topic='twitter-topic'
2024-04-02 14:16:25 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:25 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:26 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit amet, ipsum sit amet, sit Kafka amet, Lorem  Lorem  amet, ipsum
2024-04-02 14:16:26 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5554765455687477593, "id": 6345972140330342087, "text": "amet, sit amet, ipsum sit amet, sit Kafka amet, Lorem  Lorem  amet, ipsum", "createdAt": 1712081786000}' to topic='twitter-topic'
2024-04-02 14:16:26 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:26 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:27 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor ipsum Spring ipsum sit
2024-04-02 14:16:27 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1680600570798060469, "id": 8748711989445552533, "text": "amet, dolor ipsum Spring ipsum sit", "createdAt": 1712081787000}' to topic='twitter-topic'
2024-04-02 14:16:27 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:27 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:28 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, ipsum amet, amet, sit Kafka dolor dolor amet,
2024-04-02 14:16:28 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 9117018107905492514, "id": 5726576895637623877, "text": "amet, ipsum amet, amet, sit Kafka dolor dolor amet,", "createdAt": 1712081788000}' to topic='twitter-topic'
2024-04-02 14:16:28 [pool-4-thread-1] ERROR c.j.m.k.p.s.i.TwitterKafkaProducer - Error sending message to kafka
org.apache.kafka.common.errors.SerializationException: Error serializing Avro message
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:101)
	at io.confluent.kafka.serializers.KafkaAvroSerializer.serialize(KafkaAvroSerializer.java:53)
	at org.apache.kafka.common.serialization.Serializer.serialize(Serializer.java:62)
	at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:1000)
	at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:947)
	at org.springframework.kafka.core.DefaultKafkaProducerFactory$CloseSafeProducer.send(DefaultKafkaProducerFactory.java:1050)
	at org.springframework.kafka.core.KafkaTemplate.doSend(KafkaTemplate.java:804)
	at org.springframework.kafka.core.KafkaTemplate.observeSend(KafkaTemplate.java:773)
	at org.springframework.kafka.core.KafkaTemplate.send(KafkaTemplate.java:557)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:32)
	at com.juank.microservices.kafka.producer.service.impl.TwitterKafkaProducer.send(TwitterKafkaProducer.java:15)
	at com.juank.microservices.twitter_to_kafka.listener.TwitterKafkaStatusListener.onStatus(TwitterKafkaStatusListener.java:37)
	at com.juank.microservices.twitter_to_kafka.runner.impl.MockKafkaStreamRunner.lambda$simulateTwitterStream$0(MockKafkaStreamRunner.java:84)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.MalformedURLException: no protocol: schema.registry.url/subjects/twitter-topic-value/versions
	at java.base/java.net.URL.<init>(URL.java:674)
	at java.base/java.net.URL.<init>(URL.java:569)
	at java.base/java.net.URL.<init>(URL.java:516)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.sendHttpRequest(RestService.java:175)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.httpRequest(RestService.java:256)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:356)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:348)
	at io.confluent.kafka.schemaregistry.client.rest.RestService.registerSchema(RestService.java:334)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.registerAndGetId(CachedSchemaRegistryClient.java:168)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:222)
	at io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient.register(CachedSchemaRegistryClient.java:198)
	at io.confluent.kafka.serializers.AbstractKafkaAvroSerializer.serializeImpl(AbstractKafkaAvroSerializer.java:70)
	... 17 common frames omitted
2024-04-02 14:16:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:28 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:29 [SpringApplicationShutdownHook] INFO  o.a.k.clients.producer.KafkaProducer - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2024-04-02 14:16:29 [kafka-producer-network-thread | producer-1] WARN  o.apache.kafka.clients.NetworkClient - [Producer clientId=producer-1] 3 partitions have leader brokers without a matching listener, including [twitter-topic-2, twitter-topic-1, twitter-topic-0]
2024-04-02 14:16:29 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 14:16:29 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 14:16:29 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 14:16:29 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.producer for producer-1 unregistered
2024-04-02 14:16:29 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 14:16:29 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 14:16:29 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 14:16:29 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 14:18:32 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 23112 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 14:18:32 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 14:18:34 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 14:18:35 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 14:18:35 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 14:18:35 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712081915011
2024-04-02 14:18:36 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 14:18:36 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 4.056 seconds (process running for 5.251)
2024-04-02 14:18:36 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 14:18:36 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 14:18:36 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 14:18:36 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 14:18:50 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-04-02 14:18:50 [main] ERROR o.s.boot.SpringApplication - Application run failed
com.juank.microservices.kafka.admin.exception.KafkaClientException: Reached max number of retry for reading kafka topic(s)!
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkMaxRetry(KafkaAdminClients.java:108)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkSchemaRegistry(KafkaAdminClients.java:87)
	at com.juank.microservices.twitter_to_kafka.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:28)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.run(TwitterToKafkaServiceApplication.java:46)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.main(TwitterToKafkaServiceApplication.java:38)
2024-04-02 14:18:52 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 14:18:52 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 14:18:52 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 14:18:52 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 14:25:25 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 37956 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 14:25:25 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 14:25:27 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 14:25:27 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 14:25:27 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 14:25:27 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712082327820
2024-04-02 14:25:27 [kafka-admin-client-thread | adminclient-1] INFO  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Node -3 disconnected.
2024-04-02 14:25:27 [kafka-admin-client-thread | adminclient-1] WARN  o.apache.kafka.clients.NetworkClient - [AdminClient clientId=adminclient-1] Connection to node -3 (localhost/127.0.0.1:39092) could not be established. Broker may not be available.
2024-04-02 14:25:28 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 14:25:28 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 3.927 seconds (process running for 5.172)
2024-04-02 14:25:28 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 14:25:28 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 14:25:28 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 14:25:28 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 14:25:43 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-04-02 14:25:43 [main] ERROR o.s.boot.SpringApplication - Application run failed
com.juank.microservices.kafka.admin.exception.KafkaClientException: Reached max number of retry for reading kafka topic(s)!
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkMaxRetry(KafkaAdminClients.java:114)
	at com.juank.microservices.kafka.admin.client.KafkaAdminClients.checkSchemaRegistry(KafkaAdminClients.java:89)
	at com.juank.microservices.twitter_to_kafka.init.impl.KafkaStreamInitializer.init(KafkaStreamInitializer.java:28)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.run(TwitterToKafkaServiceApplication.java:46)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at com.juank.microservices.twitter_to_kafka.TwitterToKafkaServiceApplication.main(TwitterToKafkaServiceApplication.java:38)
2024-04-02 14:25:45 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 14:25:45 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 14:25:45 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 14:25:45 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 14:29:18 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 42284 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 14:29:18 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 14:29:19 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 14:29:20 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 14:29:20 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 14:29:20 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712082560474
2024-04-02 14:29:22 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 14:29:22 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 4.823 seconds (process running for 5.914)
2024-04-02 14:29:22 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 14:29:22 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 14:29:22 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 14:29:22 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 14:29:23 [reactor-http-nio-3] WARN  r.n.http.client.HttpClientConnect - [ffab4bac-1, L:/127.0.0.1:62424 ! R:localhost/127.0.0.1:8081] The connection observed an error
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response
2024-04-02 14:29:25 [reactor-http-nio-4] WARN  r.n.http.client.HttpClientConnect - [898741ed-1, L:/127.0.0.1:62427 ! R:localhost/127.0.0.1:8081] The connection observed an error
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response
2024-04-02 14:29:29 [reactor-http-nio-5] WARN  r.n.http.client.HttpClientConnect - [f396f7a4-1, L:/127.0.0.1:62430 ! R:localhost/127.0.0.1:8081] The connection observed an error
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response
2024-04-02 14:29:32 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 14:29:32 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 14:29:32 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 14:29:32 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 14:30:02 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Starting TwitterToKafkaServiceApplication using Java 17.0.8 with PID 20552 (D:\Event-Driven-Micro-Udemy\microservices-demo\twitter-to-kafka-service\target\classes started by Juan Carlos in D:\Event-Driven-Micro-Udemy\microservices-demo)
2024-04-02 14:30:02 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - No active profile set, falling back to 1 default profile: "default"
2024-04-02 14:30:06 [main] INFO  o.a.k.c.admin.AdminClientConfig - AdminClientConfig values: 
	auto.include.jmx.reporter = true
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	client.dns.lookup = use_all_dns_ips
	client.id = 
	connections.max.idle.ms = 300000
	default.api.timeout.ms = 60000
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS

2024-04-02 14:30:06 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 14:30:06 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 14:30:06 [main] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712082606693
2024-04-02 14:30:09 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080
2024-04-02 14:30:09 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - Started TwitterToKafkaServiceApplication in 8.158 seconds (process running for 9.967)
2024-04-02 14:30:09 [main] INFO  c.j.m.t.TwitterToKafkaServiceApplication - App starts...
2024-04-02 14:30:09 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Creating 1 topic(s), attempt 0
2024-04-02 14:30:09 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Create topic result {twitter-topic=KafkaFuture{value=null,exception=null,done=false}}
2024-04-02 14:30:09 [main] INFO  c.j.m.k.a.client.KafkaAdminClients - Reading kafka topic [twitter-topic], attempt 0
2024-04-02 14:30:10 [reactor-http-nio-3] WARN  r.n.http.client.HttpClientConnect - [cf3f6a48-1, L:/127.0.0.1:62441 ! R:localhost/127.0.0.1:8081] The connection observed an error
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response
2024-04-02 14:30:12 [reactor-http-nio-4] WARN  r.n.http.client.HttpClientConnect - [0ad6a3a7-1, L:/127.0.0.1:62443 ! R:localhost/127.0.0.1:8081] The connection observed an error
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response
2024-04-02 14:30:16 [main] INFO  c.j.m.t.i.i.KafkaStreamInitializer - Topics with name twitter-topic is ready for operations!
2024-04-02 14:30:16 [main] INFO  c.j.m.t.r.impl.MockKafkaStreamRunner - Starting mock filtering stream for keywords [Java, Microservices, Spring, Kafka, Elasticsearch]
2024-04-02 14:30:16 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  ipsum sit sit Lorem  Kafka sit sit Lorem  Lorem
2024-04-02 14:30:16 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 182158813859037701, "id": 2563223405706391032, "text": "sit Lorem  ipsum sit sit Lorem  Kafka sit sit Lorem  Lorem", "createdAt": 1712082616000}' to topic='twitter-topic'
2024-04-02 14:30:16 [pool-4-thread-1] INFO  o.a.k.c.producer.ProducerConfig - ProducerConfig values: 
	acks = -1
	auto.include.jmx.reporter = true
	batch.size = 1638400
	bootstrap.servers = [localhost:19092, localhost:29092, localhost:39092]
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	compression.type = snappy
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = true
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.LongSerializer
	linger.ms = 5
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.adaptive.partitioning.enable = true
	partitioner.availability.timeout.ms = 0
	partitioner.class = null
	partitioner.ignore.keys = false
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 60000
	retries = 5
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.connect.timeout.ms = null
	sasl.login.read.timeout.ms = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.login.retry.backoff.max.ms = 10000
	sasl.login.retry.backoff.ms = 100
	sasl.mechanism = GSSAPI
	sasl.oauthbearer.clock.skew.seconds = 30
	sasl.oauthbearer.expected.audience = null
	sasl.oauthbearer.expected.issuer = null
	sasl.oauthbearer.jwks.endpoint.refresh.ms = 3600000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.max.ms = 10000
	sasl.oauthbearer.jwks.endpoint.retry.backoff.ms = 100
	sasl.oauthbearer.jwks.endpoint.url = null
	sasl.oauthbearer.scope.claim.name = scope
	sasl.oauthbearer.sub.claim.name = sub
	sasl.oauthbearer.token.endpoint.url = null
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.3]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.3
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer

2024-04-02 14:30:16 [pool-4-thread-1] INFO  i.c.k.s.KafkaAvroSerializerConfig - KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy

2024-04-02 14:30:16 [pool-4-thread-1] INFO  o.a.k.clients.producer.KafkaProducer - [Producer clientId=producer-1] Instantiated an idempotent producer.
2024-04-02 14:30:16 [pool-4-thread-1] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka version: 3.6.1
2024-04-02 14:30:16 [pool-4-thread-1] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka commitId: 5e3c2b738d253ff5
2024-04-02 14:30:16 [pool-4-thread-1] INFO  o.a.kafka.common.utils.AppInfoParser - Kafka startTimeMs: 1712082616818
2024-04-02 14:30:16 [kafka-producer-network-thread | producer-1] INFO  org.apache.kafka.clients.Metadata - [Producer clientId=producer-1] Cluster ID: N12cirbeTD-soLVEQtE1yA
2024-04-02 14:30:16 [kafka-producer-network-thread | producer-1] INFO  o.a.k.c.p.i.TransactionManager - [Producer clientId=producer-1] ProducerId set to 10000 with epoch 0
2024-04-02 14:30:17 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 0; Timestamp 1712082616842, at time 743043044954700
2024-04-02 14:30:18 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum Lorem  dolor dolor ipsum amet, sit amet, Microservices sit ipsum ipsum ipsum amet, Lorem
2024-04-02 14:30:18 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7365560939470981962, "id": 1141603302673996243, "text": "ipsum Lorem  dolor dolor ipsum amet, sit amet, Microservices sit ipsum ipsum ipsum amet, Lorem", "createdAt": 1712082618000}' to topic='twitter-topic'
2024-04-02 14:30:18 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 0; Timestamp 1712082618327, at time 743043964115800
2024-04-02 14:30:19 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, ipsum sit dolor sit Microservices dolor sit Lorem
2024-04-02 14:30:19 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5157984035154270960, "id": 2742604863860433344, "text": "amet, ipsum sit dolor sit Microservices dolor sit Lorem", "createdAt": 1712082619000}' to topic='twitter-topic'
2024-04-02 14:30:19 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 1; Timestamp 1712082619343, at time 743044940383800
2024-04-02 14:30:20 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor sit Lorem  dolor Kafka dolor Lorem
2024-04-02 14:30:20 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 682324276833991445, "id": 7811553914894454882, "text": "dolor sit Lorem  dolor Kafka dolor Lorem", "createdAt": 1712082620000}' to topic='twitter-topic'
2024-04-02 14:30:20 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 1; Timestamp 1712082620345, at time 743045939737600
2024-04-02 14:30:21 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum ipsum ipsum amet, ipsum sit dolor Spring amet, sit dolor Lorem  amet, ipsum
2024-04-02 14:30:21 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 9022560473506470310, "id": 2859596161128910451, "text": "sit ipsum ipsum ipsum amet, ipsum sit dolor Spring amet, sit dolor Lorem  amet, ipsum", "createdAt": 1712082621000}' to topic='twitter-topic'
2024-04-02 14:30:21 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 0; Timestamp 1712082621348, at time 743046990854800
2024-04-02 14:30:22 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, ipsum ipsum Kafka dolor Lorem
2024-04-02 14:30:22 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3973298583306044215, "id": 4409601253936367765, "text": "amet, ipsum ipsum Kafka dolor Lorem", "createdAt": 1712082622000}' to topic='twitter-topic'
2024-04-02 14:30:22 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 1; Timestamp 1712082622357, at time 743047953365800
2024-04-02 14:30:23 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  Lorem  Lorem  ipsum Lorem  Kafka Lorem  Lorem  sit sit dolor
2024-04-02 14:30:23 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5328124441124258054, "id": 5403308979109063655, "text": "sit Lorem  Lorem  Lorem  ipsum Lorem  Kafka Lorem  Lorem  sit sit dolor", "createdAt": 1712082623000}' to topic='twitter-topic'
2024-04-02 14:30:23 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 2; Timestamp 1712082623367, at time 743048962659600
2024-04-02 14:30:24 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  Lorem  dolor sit dolor amet, dolor Elasticsearch ipsum sit dolor ipsum sit dolor
2024-04-02 14:30:24 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6708191572998647121, "id": 4894910627991010238, "text": "Lorem  Lorem  dolor sit dolor amet, dolor Elasticsearch ipsum sit dolor ipsum sit dolor", "createdAt": 1712082624000}' to topic='twitter-topic'
2024-04-02 14:30:24 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 3; Timestamp 1712082624378, at time 743049972999800
2024-04-02 14:30:25 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit ipsum amet, dolor sit ipsum sit Elasticsearch amet, ipsum Lorem  Lorem  ipsum Lorem  Lorem
2024-04-02 14:30:25 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3818836213897890323, "id": 1495768537138948578, "text": "Lorem  sit ipsum amet, dolor sit ipsum sit Elasticsearch amet, ipsum Lorem  Lorem  ipsum Lorem  Lorem", "createdAt": 1712082625000}' to topic='twitter-topic'
2024-04-02 14:30:25 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 2; Timestamp 1712082625394, at time 743050989501300
2024-04-02 14:30:26 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor ipsum sit dolor Microservices Lorem  Lorem  amet,
2024-04-02 14:30:26 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6578782189360043952, "id": 5071797858038920905, "text": "amet, dolor ipsum sit dolor Microservices Lorem  Lorem  amet,", "createdAt": 1712082626000}' to topic='twitter-topic'
2024-04-02 14:30:26 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 2; Timestamp 1712082626397, at time 743051991777900
2024-04-02 14:30:27 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  ipsum Lorem  sit amet, dolor dolor Elasticsearch dolor dolor dolor dolor amet,
2024-04-02 14:30:27 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2039040330053643126, "id": 5321653012927393828, "text": "Lorem  ipsum Lorem  sit amet, dolor dolor Elasticsearch dolor dolor dolor dolor amet,", "createdAt": 1712082627000}' to topic='twitter-topic'
2024-04-02 14:30:27 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 3; Timestamp 1712082627411, at time 743053007241700
2024-04-02 14:30:28 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum dolor ipsum amet, amet, dolor Spring ipsum amet, dolor Lorem  Lorem
2024-04-02 14:30:28 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 317226445273222701, "id": 6309657352107621637, "text": "ipsum dolor ipsum amet, amet, dolor Spring ipsum amet, dolor Lorem  Lorem", "createdAt": 1712082628000}' to topic='twitter-topic'
2024-04-02 14:30:28 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 4; Timestamp 1712082628429, at time 743054023391700
2024-04-02 14:30:29 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, sit Lorem  Lorem  dolor Lorem  dolor Microservices amet, dolor sit Lorem  dolor
2024-04-02 14:30:29 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3119948708204036940, "id": 180763957905727430, "text": "amet, sit Lorem  Lorem  dolor Lorem  dolor Microservices amet, dolor sit Lorem  dolor", "createdAt": 1712082629000}' to topic='twitter-topic'
2024-04-02 14:30:29 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 3; Timestamp 1712082629434, at time 743055028212200
2024-04-02 14:30:30 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit amet, ipsum ipsum ipsum ipsum Spring amet, Lorem  dolor dolor amet,
2024-04-02 14:30:30 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4547024449303011617, "id": 2852040223476420980, "text": "sit amet, ipsum ipsum ipsum ipsum Spring amet, Lorem  dolor dolor amet,", "createdAt": 1712082630000}' to topic='twitter-topic'
2024-04-02 14:30:30 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 4; Timestamp 1712082630442, at time 743056037275200
2024-04-02 14:30:31 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  sit sit Lorem  Lorem  ipsum dolor Microservices ipsum amet, sit amet, sit
2024-04-02 14:30:31 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5901513503266049747, "id": 8377181463430866527, "text": "Lorem  sit sit Lorem  Lorem  ipsum dolor Microservices ipsum amet, sit amet, sit", "createdAt": 1712082631000}' to topic='twitter-topic'
2024-04-02 14:30:31 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 5; Timestamp 1712082631450, at time 743057044799700
2024-04-02 14:30:32 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit amet, Lorem  amet, Spring sit dolor dolor
2024-04-02 14:30:32 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1120309041612998792, "id": 3772280239862322618, "text": "sit sit amet, Lorem  amet, Spring sit dolor dolor", "createdAt": 1712082632000}' to topic='twitter-topic'
2024-04-02 14:30:32 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 6; Timestamp 1712082632452, at time 743058049913200
2024-04-02 14:30:33 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor dolor amet, amet, sit amet, ipsum Spring Lorem  ipsum amet, Lorem  sit
2024-04-02 14:30:33 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5919992579942316855, "id": 4619245831467896172, "text": "dolor dolor amet, amet, sit amet, ipsum Spring Lorem  ipsum amet, Lorem  sit", "createdAt": 1712082633000}' to topic='twitter-topic'
2024-04-02 14:30:33 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 7; Timestamp 1712082633458, at time 743059054870100
2024-04-02 14:30:34 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit sit ipsum Lorem  ipsum amet, ipsum Kafka ipsum Lorem  amet, sit sit Lorem  dolor
2024-04-02 14:30:34 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8234860278308078312, "id": 3992456916516769318, "text": "sit sit sit ipsum Lorem  ipsum amet, ipsum Kafka ipsum Lorem  amet, sit sit Lorem  dolor", "createdAt": 1712082634000}' to topic='twitter-topic'
2024-04-02 14:30:34 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 8; Timestamp 1712082634459, at time 743060053859800
2024-04-02 14:30:35 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum sit amet, sit amet, sit Kafka Lorem  dolor sit ipsum
2024-04-02 14:30:35 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2766458672598535356, "id": 2740706020002882356, "text": "ipsum sit amet, sit amet, sit Kafka Lorem  dolor sit ipsum", "createdAt": 1712082635000}' to topic='twitter-topic'
2024-04-02 14:30:35 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 5; Timestamp 1712082635475, at time 743061070095200
2024-04-02 14:30:36 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, amet, amet, amet, sit Kafka ipsum dolor sit
2024-04-02 14:30:36 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2412693770213190501, "id": 3322874451599538781, "text": "amet, amet, amet, amet, sit Kafka ipsum dolor sit", "createdAt": 1712082636000}' to topic='twitter-topic'
2024-04-02 14:30:36 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 9; Timestamp 1712082636490, at time 743062085192000
2024-04-02 14:30:37 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum amet, amet, Spring amet, Lorem
2024-04-02 14:30:37 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 7938167356574868590, "id": 8596969695777344796, "text": "ipsum amet, amet, Spring amet, Lorem", "createdAt": 1712082637000}' to topic='twitter-topic'
2024-04-02 14:30:37 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 10; Timestamp 1712082637502, at time 743063095636700
2024-04-02 14:30:38 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum ipsum dolor dolor Lorem  sit Java ipsum ipsum ipsum sit
2024-04-02 14:30:38 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 9045741678484391942, "id": 4302018994618777555, "text": "ipsum ipsum dolor dolor Lorem  sit Java ipsum ipsum ipsum sit", "createdAt": 1712082638000}' to topic='twitter-topic'
2024-04-02 14:30:38 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 4; Timestamp 1712082638515, at time 743064110753400
2024-04-02 14:30:39 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor ipsum amet, sit Microservices amet, sit Lorem  ipsum
2024-04-02 14:30:39 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 348548346235450767, "id": 2308542138313061201, "text": "sit dolor ipsum amet, sit Microservices amet, sit Lorem  ipsum", "createdAt": 1712082639000}' to topic='twitter-topic'
2024-04-02 14:30:39 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 6; Timestamp 1712082639529, at time 743065122045200
2024-04-02 14:30:40 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  sit sit Spring amet, ipsum
2024-04-02 14:30:40 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2615804651615754964, "id": 4200810947046702285, "text": "sit Lorem  sit sit Spring amet, ipsum", "createdAt": 1712082640000}' to topic='twitter-topic'
2024-04-02 14:30:40 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 5; Timestamp 1712082640535, at time 743066129554900
2024-04-02 14:30:41 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum sit Lorem  amet, dolor dolor Java amet, sit ipsum Lorem  ipsum amet,
2024-04-02 14:30:41 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3341643674846834872, "id": 5239572619036474892, "text": "sit ipsum sit Lorem  amet, dolor dolor Java amet, sit ipsum Lorem  ipsum amet,", "createdAt": 1712082641000}' to topic='twitter-topic'
2024-04-02 14:30:41 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 6; Timestamp 1712082641542, at time 743067135121200
2024-04-02 14:30:42 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, Lorem  ipsum Lorem  sit sit sit Spring dolor dolor Lorem  dolor dolor Lorem
2024-04-02 14:30:42 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 9117147859900618442, "id": 7236075353163619338, "text": "amet, Lorem  ipsum Lorem  sit sit sit Spring dolor dolor Lorem  dolor dolor Lorem", "createdAt": 1712082642000}' to topic='twitter-topic'
2024-04-02 14:30:42 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 7; Timestamp 1712082642552, at time 743068144620400
2024-04-02 14:30:43 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor amet, Spring dolor sit
2024-04-02 14:30:43 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4029485013586528573, "id": 1639070736987705946, "text": "sit dolor amet, Spring dolor sit", "createdAt": 1712082643000}' to topic='twitter-topic'
2024-04-02 14:30:43 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 8; Timestamp 1712082643565, at time 743069158911600
2024-04-02 14:30:44 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  Lorem  sit amet, Microservices sit sit dolor amet,
2024-04-02 14:30:44 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5949500025330473811, "id": 3443726224036767226, "text": "sit Lorem  Lorem  sit amet, Microservices sit sit dolor amet,", "createdAt": 1712082644000}' to topic='twitter-topic'
2024-04-02 14:30:44 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 7; Timestamp 1712082644578, at time 743070170230600
2024-04-02 14:30:45 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum Lorem  amet, Lorem  dolor dolor Elasticsearch ipsum Lorem  dolor ipsum Lorem
2024-04-02 14:30:45 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6547864661157442213, "id": 1260073735878575764, "text": "sit ipsum Lorem  amet, Lorem  dolor dolor Elasticsearch ipsum Lorem  dolor ipsum Lorem", "createdAt": 1712082645000}' to topic='twitter-topic'
2024-04-02 14:30:45 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 11; Timestamp 1712082645582, at time 743071176315200
2024-04-02 14:30:46 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor dolor ipsum Lorem  sit Elasticsearch sit Lorem  sit
2024-04-02 14:30:46 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6882585388292404331, "id": 1590869986464790115, "text": "dolor dolor ipsum Lorem  sit Elasticsearch sit Lorem  sit", "createdAt": 1712082646000}' to topic='twitter-topic'
2024-04-02 14:30:46 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 8; Timestamp 1712082646588, at time 743072180257800
2024-04-02 14:30:47 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, ipsum amet, Lorem  ipsum amet, amet, Lorem  Kafka sit amet, Lorem  amet, ipsum ipsum ipsum
2024-04-02 14:30:47 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 4234176969334450507, "id": 2046214839662480475, "text": "amet, ipsum amet, Lorem  ipsum amet, amet, Lorem  Kafka sit amet, Lorem  amet, ipsum ipsum ipsum", "createdAt": 1712082647000}' to topic='twitter-topic'
2024-04-02 14:30:47 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 12; Timestamp 1712082647599, at time 743073192192100
2024-04-02 14:30:48 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  amet, ipsum dolor ipsum Kafka sit ipsum Lorem  Lorem  sit
2024-04-02 14:30:48 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6161667053178273372, "id": 1908178436620166781, "text": "dolor Lorem  amet, ipsum dolor ipsum Kafka sit ipsum Lorem  Lorem  sit", "createdAt": 1712082648000}' to topic='twitter-topic'
2024-04-02 14:30:48 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 13; Timestamp 1712082648612, at time 743074204030700
2024-04-02 14:30:49 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum ipsum dolor Microservices sit amet,
2024-04-02 14:30:49 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8482492318855033114, "id": 2450538325265338173, "text": "sit ipsum ipsum dolor Microservices sit amet,", "createdAt": 1712082649000}' to topic='twitter-topic'
2024-04-02 14:30:49 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 9; Timestamp 1712082649616, at time 743075208917500
2024-04-02 14:30:50 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit ipsum sit dolor Lorem  ipsum amet, Lorem  Java dolor sit dolor dolor amet, dolor
2024-04-02 14:30:50 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8620873651043017884, "id": 4021913733245068228, "text": "sit ipsum sit dolor Lorem  ipsum amet, Lorem  Java dolor sit dolor dolor amet, dolor", "createdAt": 1712082650000}' to topic='twitter-topic'
2024-04-02 14:30:50 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 14; Timestamp 1712082650617, at time 743076210602900
2024-04-02 14:30:51 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor dolor amet, amet, Java sit dolor Lorem
2024-04-02 14:30:51 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6752815914201249989, "id": 6210987814348249543, "text": "dolor dolor amet, amet, Java sit dolor Lorem", "createdAt": 1712082651000}' to topic='twitter-topic'
2024-04-02 14:30:51 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 10; Timestamp 1712082651620, at time 743077213838400
2024-04-02 14:30:52 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum amet, sit ipsum dolor amet, dolor Elasticsearch ipsum dolor dolor amet, amet, sit
2024-04-02 14:30:52 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 5789153148723570378, "id": 7413253418513401357, "text": "ipsum amet, sit ipsum dolor amet, dolor Elasticsearch ipsum dolor dolor amet, amet, sit", "createdAt": 1712082652000}' to topic='twitter-topic'
2024-04-02 14:30:52 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 15; Timestamp 1712082652622, at time 743078215796900
2024-04-02 14:30:53 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor ipsum Lorem  Lorem  Microservices amet, dolor sit
2024-04-02 14:30:53 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 6313498175902541259, "id": 9034609133512697206, "text": "dolor ipsum Lorem  Lorem  Microservices amet, dolor sit", "createdAt": 1712082653000}' to topic='twitter-topic'
2024-04-02 14:30:53 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 16; Timestamp 1712082653628, at time 743079220404000
2024-04-02 14:30:54 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum amet, dolor dolor sit Java sit ipsum amet,
2024-04-02 14:30:54 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1999757912411574523, "id": 3762099973196933971, "text": "ipsum amet, dolor dolor sit Java sit ipsum amet,", "createdAt": 1712082654000}' to topic='twitter-topic'
2024-04-02 14:30:54 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 17; Timestamp 1712082654639, at time 743080231300600
2024-04-02 14:30:55 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor ipsum dolor sit Lorem  dolor amet, Spring dolor ipsum ipsum dolor sit dolor
2024-04-02 14:30:55 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1911476347255756950, "id": 5899737903661939679, "text": "sit dolor ipsum dolor sit Lorem  dolor amet, Spring dolor ipsum ipsum dolor sit dolor", "createdAt": 1712082655000}' to topic='twitter-topic'
2024-04-02 14:30:55 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 18; Timestamp 1712082655643, at time 743081234525100
2024-04-02 14:30:56 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit Lorem  ipsum Kafka ipsum Lorem  ipsum
2024-04-02 14:30:56 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 728616341650575345, "id": 135375873629985143, "text": "sit sit Lorem  ipsum Kafka ipsum Lorem  ipsum", "createdAt": 1712082656000}' to topic='twitter-topic'
2024-04-02 14:30:56 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 9; Timestamp 1712082656650, at time 743082241905000
2024-04-02 14:30:57 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit dolor dolor Lorem  amet, Lorem  amet, dolor Elasticsearch sit ipsum dolor amet, dolor sit ipsum
2024-04-02 14:30:57 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2774243846135206445, "id": 1680219912427023589, "text": "sit dolor dolor Lorem  amet, Lorem  amet, dolor Elasticsearch sit ipsum dolor amet, dolor sit ipsum", "createdAt": 1712082657000}' to topic='twitter-topic'
2024-04-02 14:30:57 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 11; Timestamp 1712082657662, at time 743083253607600
2024-04-02 14:30:58 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  amet, sit Lorem  Lorem  Elasticsearch ipsum amet, dolor
2024-04-02 14:30:58 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3495599295240865669, "id": 1750202912547359111, "text": "Lorem  amet, sit Lorem  Lorem  Elasticsearch ipsum amet, dolor", "createdAt": 1712082658000}' to topic='twitter-topic'
2024-04-02 14:30:58 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 19; Timestamp 1712082658668, at time 743084259943000
2024-04-02 14:30:59 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit dolor sit amet, ipsum sit Elasticsearch amet, ipsum dolor Lorem  dolor ipsum
2024-04-02 14:30:59 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 2966041428741900117, "id": 6574726022331275297, "text": "sit sit dolor sit amet, ipsum sit Elasticsearch amet, ipsum dolor Lorem  dolor ipsum", "createdAt": 1712082659000}' to topic='twitter-topic'
2024-04-02 14:30:59 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 12; Timestamp 1712082659681, at time 743085271895000
2024-04-02 14:31:00 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit sit amet, amet, sit Spring amet, sit ipsum amet,
2024-04-02 14:31:00 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 8394241149069522298, "id": 2873770847737010975, "text": "sit sit amet, amet, sit Spring amet, sit ipsum amet,", "createdAt": 1712082660000}' to topic='twitter-topic'
2024-04-02 14:31:00 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 10; Timestamp 1712082660690, at time 743086282897700
2024-04-02 14:31:01 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text dolor Lorem  dolor Lorem  sit Java amet, sit Lorem  sit
2024-04-02 14:31:01 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1997247253952906928, "id": 6569717196682840964, "text": "dolor Lorem  dolor Lorem  sit Java amet, sit Lorem  sit", "createdAt": 1712082661000}' to topic='twitter-topic'
2024-04-02 14:31:01 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 20; Timestamp 1712082661694, at time 743087285679700
2024-04-02 14:31:02 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text Lorem  Lorem  Lorem  Lorem  Elasticsearch Lorem  Lorem
2024-04-02 14:31:02 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1542928580858568165, "id": 5209353964389960315, "text": "Lorem  Lorem  Lorem  Lorem  Elasticsearch Lorem  Lorem", "createdAt": 1712082662000}' to topic='twitter-topic'
2024-04-02 14:31:02 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 0; Offset 13; Timestamp 1712082662701, at time 743088292616000
2024-04-02 14:31:03 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text amet, dolor dolor Lorem  dolor Kafka ipsum sit ipsum dolor
2024-04-02 14:31:03 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1128706208958036171, "id": 2430054917711450784, "text": "amet, dolor dolor Lorem  dolor Kafka ipsum sit ipsum dolor", "createdAt": 1712082663000}' to topic='twitter-topic'
2024-04-02 14:31:03 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 21; Timestamp 1712082663705, at time 743089295086000
2024-04-02 14:31:04 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum sit sit Lorem  Spring dolor dolor sit
2024-04-02 14:31:04 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 3603804890645689599, "id": 4750142493913793822, "text": "ipsum sit sit Lorem  Spring dolor dolor sit", "createdAt": 1712082664000}' to topic='twitter-topic'
2024-04-02 14:31:04 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 1; Offset 11; Timestamp 1712082664707, at time 743090296739700
2024-04-02 14:31:05 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text ipsum sit Lorem  Lorem  dolor sit Kafka dolor ipsum ipsum Lorem
2024-04-02 14:31:05 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1815378292649841944, "id": 8664230686784757012, "text": "ipsum sit Lorem  Lorem  dolor sit Kafka dolor ipsum ipsum Lorem", "createdAt": 1712082665000}' to topic='twitter-topic'
2024-04-02 14:31:05 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 22; Timestamp 1712082665721, at time 743091312293400
2024-04-02 14:31:06 [pool-4-thread-1] INFO  c.j.m.t.l.TwitterKafkaStatusListener - Twitter status with text sit Lorem  sit Microservices Lorem  amet,
2024-04-02 14:31:06 [pool-4-thread-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Sending message='{"userId": 1974314179553243275, "id": 4388690809619866823, "text": "sit Lorem  sit Microservices Lorem  amet,", "createdAt": 1712082666000}' to topic='twitter-topic'
2024-04-02 14:31:06 [kafka-producer-network-thread | producer-1] INFO  c.j.m.k.p.s.i.TwitterKafkaProducer - Received new metadata. Topic: twitter-topic; Partition 2; Offset 23; Timestamp 1712082666726, at time 743092323772400
2024-04-02 14:31:07 [SpringApplicationShutdownHook] INFO  o.a.k.clients.producer.KafkaProducer - [Producer clientId=producer-1] Closing the Kafka producer with timeoutMillis = 30000 ms.
2024-04-02 14:31:07 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 14:31:07 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 14:31:07 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
2024-04-02 14:31:07 [SpringApplicationShutdownHook] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.producer for producer-1 unregistered
2024-04-02 14:31:07 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.utils.AppInfoParser - App info kafka.admin.client for adminclient-1 unregistered
2024-04-02 14:31:07 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics scheduler closed
2024-04-02 14:31:07 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
2024-04-02 14:31:07 [kafka-admin-client-thread | adminclient-1] INFO  o.a.kafka.common.metrics.Metrics - Metrics reporters closed
